{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 id => uint256) private _totalSupply;\n    uint256 private _totalSupplyAll;\n\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids[i]] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids[i]] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev ERC1155 token with storage based token URI management.\n * Inspired by the ERC721URIStorage extension\n */\nabstract contract ERC1155URIStorage is ERC1155 {\n    using Strings for uint256;\n\n    // Optional base URI\n    string private _baseURI = \"\";\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via string.concat).\n        return bytes(tokenURI).length > 0 ? string.concat(_baseURI, tokenURI) : super.uri(tokenId);\n    }\n\n    /**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n    function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/certificates/abstracts/AbstractModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AttestationPayload} from \"../interfaces/Structs.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @title Abstract Module\r\n * @author Consensys\r\n * @notice Defines the minimal Module interface\r\n */\r\nabstract contract AbstractModule is IERC165 {\r\n    /// @notice Error thrown when someone else than the portal's owner is trying to revoke\r\n    error OnlyPortalOwner();\r\n\r\n    /**\r\n     * @notice Executes the module's custom logic.\r\n     * @param attestationPayload The incoming attestation data.\r\n     * @param validationPayload Additional data required for verification.\r\n     * @param txSender The transaction sender's address.\r\n     * @param value The transaction value.\r\n     */\r\n    function run(\r\n        AttestationPayload memory attestationPayload,\r\n        bytes memory validationPayload,\r\n        address txSender,\r\n        uint256 value\r\n    ) public virtual;\r\n\r\n    /**\r\n     * @notice Checks if the contract implements the Module interface.\r\n     * @param interfaceID The ID of the interface to check.\r\n     * @return A boolean indicating interface support.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\r\n        return interfaceID == type(AbstractModule).interfaceId || interfaceID == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/abstracts/AbstractPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {IAttestationRegistry} from \"../interfaces/IAttestationRegistry.sol\";\r\nimport {IModuleRegistry} from \"../interfaces/IModuleRegistry.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport {IPortalRegistry} from \"../interfaces/IPortalRegistry.sol\";\r\nimport {IRouter} from \"../interfaces/IRouter.sol\";\r\nimport {IPortal} from \"../interfaces/IPortal.sol\";\r\nimport {AttestationPayload} from \"../interfaces/Structs.sol\";\r\n\r\n/**\r\n * @title Abstract Portal\r\n * @author Consensys\r\n * @notice This contract is an abstract contract with basic Portal logic\r\n *         to be inherited. We strongly encourage all Portals to implement\r\n *         this contract.\r\n */\r\nabstract contract AbstractPortal is IPortal {\r\n    IRouter public router;\r\n    address[] public modules;\r\n    IModuleRegistry public moduleRegistry;\r\n    IAttestationRegistry public attestationRegistry;\r\n    IPortalRegistry public portalRegistry;\r\n\r\n    /// @notice Error thrown when someone else than the portal's owner is trying to revoke\r\n    error OnlyPortalOwner();\r\n\r\n    /**\r\n     * @notice Contract constructor\r\n     * @param _modules list of modules to use for the portal (can be empty)\r\n     * @param _router Router's address\r\n     * @dev This sets the addresses for the IAttestationRegistry, IModuleRegistry and IPortalRegistry\r\n     */\r\n    constructor(address[] memory _modules, address _router) {\r\n        modules = _modules;\r\n        router = IRouter(_router);\r\n        attestationRegistry = IAttestationRegistry(router.getAttestationRegistry());\r\n        moduleRegistry = IModuleRegistry(router.getModuleRegistry());\r\n        portalRegistry = IPortalRegistry(router.getPortalRegistry());\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method to withdraw funds from the Portal\r\n     * @param to the address to send the funds to\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(address payable to, uint256 amount) external virtual;\r\n\r\n    /**\r\n     * @notice Attest the schema with given attestationPayload and validationPayload\r\n     * @param attestationPayload the payload to attest\r\n     * @param validationPayloads the payloads to validate via the modules to issue the attestations\r\n     * @dev Runs all modules for the portal and registers the attestation using IAttestationRegistry\r\n     */\r\n    function attest(AttestationPayload memory attestationPayload, bytes[] memory validationPayloads) public payable {\r\n        moduleRegistry.runModules(modules, attestationPayload, validationPayloads, msg.value);\r\n\r\n        _onAttest(attestationPayload, getAttester(), msg.value);\r\n\r\n        attestationRegistry.attest(attestationPayload, getAttester());\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk attest the schema with payloads to attest and validation payloads\r\n     * @param attestationsPayloads the payloads to attest\r\n     * @param validationPayloads the payloads to validate via the modules to issue the attestations\r\n     */\r\n    function bulkAttest(AttestationPayload[] memory attestationsPayloads, bytes[][] memory validationPayloads) public {\r\n        moduleRegistry.bulkRunModules(modules, attestationsPayloads, validationPayloads);\r\n\r\n        _onBulkAttest(attestationsPayloads, validationPayloads);\r\n\r\n        attestationRegistry.bulkAttest(attestationsPayloads, getAttester());\r\n    }\r\n\r\n    /**\r\n     * @notice Replaces the attestation for the given identifier and replaces it with a new attestation\r\n     * @param attestationId the ID of the attestation to replace\r\n     * @param attestationPayload the attestation payload to create the new attestation and register it\r\n     * @param validationPayloads the payloads to validate via the modules to issue the attestation\r\n     * @dev Runs all modules for the portal and registers the attestation using IAttestationRegistry\r\n     */\r\n    function replace(\r\n        bytes32 attestationId,\r\n        AttestationPayload memory attestationPayload,\r\n        bytes[] memory validationPayloads\r\n    ) public payable {\r\n        moduleRegistry.runModules(modules, attestationPayload, validationPayloads, msg.value);\r\n\r\n        _onReplace(attestationId, attestationPayload, getAttester(), msg.value);\r\n\r\n        attestationRegistry.replace(attestationId, attestationPayload, getAttester());\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk replaces the attestation for the given identifiers and replaces them with new attestations\r\n     * @param attestationIds the list of IDs of the attestations to replace\r\n     * @param attestationsPayloads the list of attestation payloads to create the new attestations and register them\r\n     * @param validationPayloads the payloads to validate via the modules to issue the attestations\r\n     */\r\n    function bulkReplace(\r\n        bytes32[] memory attestationIds,\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) public {\r\n        moduleRegistry.bulkRunModules(modules, attestationsPayloads, validationPayloads);\r\n\r\n        _onBulkReplace(attestationIds, attestationsPayloads, validationPayloads);\r\n\r\n        attestationRegistry.bulkReplace(attestationIds, attestationsPayloads, getAttester());\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes an attestation for the given identifier\r\n     * @param attestationId the ID of the attestation to revoke\r\n     * @dev By default, revocation is only possible by the portal owner\r\n     * We strongly encourage implementing such a rule in your Portal if you intend on overriding this method\r\n     */\r\n    function revoke(bytes32 attestationId) public {\r\n        _onRevoke(attestationId);\r\n\r\n        attestationRegistry.revoke(attestationId);\r\n    }\r\n\r\n    /**\r\n     * @notice Bulk revokes a list of attestations for the given identifiers\r\n     * @param attestationIds the IDs of the attestations to revoke\r\n     */\r\n    function bulkRevoke(bytes32[] memory attestationIds) public {\r\n        _onBulkRevoke(attestationIds);\r\n\r\n        attestationRegistry.bulkRevoke(attestationIds);\r\n    }\r\n\r\n    /**\r\n     * @notice Get all the modules addresses used by the Portal\r\n     * @return The list of modules addresses linked to the Portal\r\n     */\r\n    function getModules() external view returns (address[] memory) {\r\n        return modules;\r\n    }\r\n\r\n    /**\r\n     * @notice Verifies that a specific interface is implemented by the Portal, following ERC-165 specification\r\n     * @param interfaceID the interface identifier checked in this call\r\n     * @return The list of modules addresses linked to the Portal\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\r\n        return\r\n            interfaceID == type(AbstractPortal).interfaceId ||\r\n            interfaceID == type(IPortal).interfaceId ||\r\n            interfaceID == type(IERC165).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @notice Defines the address of the entity issuing attestations to the subject\r\n     * @dev We strongly encourage a reflection when overriding this rule: who should be set as the attester?\r\n     */\r\n    function getAttester() public view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method run before a payload is attested\r\n     * @param attestationPayload the attestation payload supposed to be attested\r\n     * @param attester the address of the attester\r\n     * @param value the value sent with the attestation\r\n     */\r\n    function _onAttest(\r\n        AttestationPayload memory attestationPayload,\r\n        address attester,\r\n        uint256 value\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Optional method run when an attestation is replaced\r\n     * @param attestationId the ID of the attestation being replaced\r\n     * @param attestationPayload the attestation payload to create attestation and register it\r\n     * @param attester the address of the attester\r\n     * @param value the value sent with the attestation\r\n     */\r\n    function _onReplace(\r\n        bytes32 attestationId,\r\n        AttestationPayload memory attestationPayload,\r\n        address attester,\r\n        uint256 value\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Optional method run when attesting a batch of payloads\r\n     * @param attestationsPayloads the payloads to attest\r\n     * @param validationPayloads the payloads to validate in order to issue the attestations\r\n     */\r\n    function _onBulkAttest(\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) internal virtual {}\r\n\r\n    function _onBulkReplace(\r\n        bytes32[] memory attestationIds,\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Optional method run when an attestation is revoked or replaced\r\n     * @dev    IMPORTANT NOTE: By default, revocation is only possible by the portal owner\r\n     */\r\n    function _onRevoke(bytes32 /*attestationId*/) internal virtual {\r\n        if (msg.sender != portalRegistry.getPortalByAddress(address(this)).ownerAddress) revert OnlyPortalOwner();\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method run when a batch of attestations are revoked or replaced\r\n     * @dev    IMPORTANT NOTE: By default, revocation is only possible by the portal owner\r\n     */\r\n    function _onBulkRevoke(bytes32[] memory /*attestationIds*/) internal virtual {\r\n        if (msg.sender != portalRegistry.getPortalByAddress(address(this)).ownerAddress) revert OnlyPortalOwner();\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IAttestationRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {Attestation, AttestationPayload} from \"./Structs.sol\";\r\nimport {IRouter} from \"./IRouter.sol\";\r\n\r\ninterface IAttestationRegistry {\r\n    /// @notice Event emitted when an attestation is registered\r\n    event AttestationRegistered(bytes32 indexed attestationId);\r\n\r\n    function router() external view returns (IRouter);\r\n\r\n    function attestations(bytes32 attestationId) external view returns (Attestation memory);\r\n\r\n    function initialize() external;\r\n\r\n    function updateRouter(address _router) external;\r\n\r\n    function updateChainPrefix(uint256 _chainPrefix) external;\r\n\r\n    function onlyPortals(address portal) external view;\r\n\r\n    function attest(AttestationPayload calldata attestationPayload, address attester) external;\r\n\r\n    function bulkAttest(AttestationPayload[] calldata attestationsPayloads, address attester) external;\r\n\r\n    function massImport(AttestationPayload[] calldata attestationsPayloads, address portal) external;\r\n\r\n    function replace(bytes32 attestationId, AttestationPayload calldata attestationPayload, address attester) external;\r\n\r\n    function bulkReplace(\r\n        bytes32[] calldata attestationIds,\r\n        AttestationPayload[] calldata attestationPayloads,\r\n        address attester\r\n    ) external;\r\n\r\n    function revoke(bytes32 attestationId) external;\r\n\r\n    function bulkRevoke(bytes32[] memory attestationIds) external;\r\n\r\n    function isRegistered(bytes32 attestationId) external view returns (bool);\r\n\r\n    function isRevocable(address portalId) external view returns (bool);\r\n\r\n    function getAttestation(bytes32 attestationId) external view returns (Attestation memory);\r\n\r\n    function incrementVersionNumber() external returns (uint16);\r\n\r\n    function getVersionNumber() external view returns (uint16);\r\n\r\n    function getAttestationIdCounter() external view returns (uint32);\r\n\r\n    function getChainPrefix() external view returns (uint256);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/// @notice A struct representing a single attestation.\r\n// solhint-disable-next-line max-line-length\r\n// this definition was taken from: https://github.com/ethereum-attestation-service/eas-contracts/blob/master/contracts/Common.sol#L25\r\nstruct Attestation {\r\n    bytes32 uid; // A unique identifier of the attestation.\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    uint64 time; // The time when the attestation was created (Unix timestamp).\r\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\r\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\r\n    bytes32 refUID; // The UID of the related attestation.\r\n    address recipient; // The recipient of the attestation.\r\n    address attester; // The attester/sender of the attestation.\r\n    bool revocable; // Whether the attestation is revocable.\r\n    bytes data; // Custom attestation data.\r\n}\r\n\r\n/// @title IEAS\r\n/// @notice EAS - Ethereum Attestation Service interface.\r\n// solhint-disable-next-line max-line-length\r\n// this definition was taken from: https://github.com/ethereum-attestation-service/eas-contracts/blob/master/contracts/IEAS.sol#L86\r\ninterface IEAS {\r\n    /// @notice Returns an existing attestation by UID.\r\n    /// @param uid The UID of the attestation to retrieve.\r\n    /// @return The attestation data members.\r\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {Module, AttestationPayload} from \"./Structs.sol\";\r\nimport {IRouter} from \"./IRouter.sol\";\r\n\r\ninterface IModuleRegistry {\r\n    function router() external view returns (IRouter);\r\n\r\n    function modules(address moduleAddress) external view returns (Module memory);\r\n\r\n    function moduleAddresses(uint256 index) external view returns (address);\r\n\r\n    function initialize() external;\r\n\r\n    function updateRouter(address _router) external;\r\n\r\n    function isContractAddress(address contractAddress) external view returns (bool);\r\n\r\n    function onlyIssuers(address issuer) external view;\r\n\r\n    function register(string memory name, string memory description, address moduleAddress) external;\r\n\r\n    function runModules(\r\n        address[] memory modulesAddresses,\r\n        AttestationPayload memory attestationPayload,\r\n        bytes[] memory validationPayloads,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function bulkRunModules(\r\n        address[] memory modulesAddresses,\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) external;\r\n\r\n    function getModulesNumber() external view returns (uint256);\r\n\r\n    function isRegistered(address moduleAddress) external view returns (bool);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @title IPortal\r\n * @author Consensys\r\n * @notice This contract is the interface to be implemented by any Portal.\r\n *         NOTE: A portal must implement this interface to registered on\r\n *         the PortalRegistry contract.\r\n */\r\ninterface IPortal is IERC165 {\r\n    /**\r\n     * @notice Get all the modules addresses used by the Portal\r\n     * @return The list of modules addresses linked to the Portal\r\n     */\r\n    function getModules() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Defines the address of the entity issuing attestations to the subject\r\n     * @dev We strongly encourage a reflection when implementing this method\r\n     */\r\n    function getAttester() external view returns (address);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IPortalRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {Portal} from \"./Structs.sol\";\r\nimport {IRouter} from \"./IRouter.sol\";\r\n\r\ninterface IPortalRegistry {\r\n    function router() external view returns (IRouter);\r\n\r\n    function portals(address id) external view returns (Portal memory);\r\n\r\n    function issuers(address issuerAddress) external view returns (bool);\r\n\r\n    function portalAddresses(uint256 index) external view returns (address);\r\n\r\n    function initialize() external;\r\n\r\n    function updateRouter(address _router) external;\r\n\r\n    function setIssuer(address issuer) external;\r\n\r\n    function removeIssuer(address issuer) external;\r\n\r\n    function isIssuer(address issuer) external view returns (bool);\r\n\r\n    function register(\r\n        address id,\r\n        string memory name,\r\n        string memory description,\r\n        bool isRevocable,\r\n        string memory ownerName\r\n    ) external;\r\n\r\n    function revoke(address id) external;\r\n\r\n    function deployDefaultPortal(\r\n        address[] calldata modules,\r\n        string memory name,\r\n        string memory description,\r\n        bool isRevocable,\r\n        string memory ownerName\r\n    ) external;\r\n\r\n    function getPortalByAddress(address id) external view returns (Portal memory);\r\n\r\n    function isRegistered(address id) external view returns (bool);\r\n\r\n    function getPortalsCount() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @title Router\r\n * @author Consensys\r\n * @notice This contract aims to provides a single entrypoint for the Verax registries\r\n */\r\ninterface IRouter {\r\n    /**\r\n     * @notice Gives the address for the AttestationRegistry contract\r\n     * @return The current address of the AttestationRegistry contract\r\n     */\r\n    function getAttestationRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @notice Gives the address for the ModuleRegistry contract\r\n     * @return The current address of the ModuleRegistry contract\r\n     */\r\n    function getModuleRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @notice Gives the address for the PortalRegistry contract\r\n     * @return The current address of the PortalRegistry contract\r\n     */\r\n    function getPortalRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @notice Gives the address for the SchemaRegistry contract\r\n     * @return The current address of the SchemaRegistry contract\r\n     */\r\n    function getSchemaRegistry() external view returns (address);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/IRubyscore_Certificates.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.21;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @title IRubyscore_Certificates\r\n * @dev IRubyscore_Certificates is an interface for Rubyscore_Certificates contract\r\n */\r\ninterface IRubyscore_Certificates is IERC1155 {\r\n    /**\r\n     * @notice Emitted when the base URI for token metadata is updated.\r\n     * @param newBaseURI The new base URI that will be used to construct token metadata URIs.\r\n     * @dev This event is triggered when the contract operator updates the base URI\r\n     * for retrieving metadata associated with tokens. The 'newBaseURI' parameter represents\r\n     * the updated base URI.\r\n     */\r\n    event BaseURISet(string indexed newBaseURI);\r\n\r\n    /**\r\n     * @notice Emitted when NFTs are minted for a user.\r\n     * @param userAddress The address of the user receiving the NFTs.\r\n     * @param nftId NFT IDs that were minted.\r\n     * @dev This event is emitted when new NFTs are created and assigned to a user.\r\n     * @dev It includes the user's address, and the ID of the minted NFT for transparency.\r\n     */\r\n    event Minted(address indexed userAddress, uint256 nftId);\r\n\r\n    /**\r\n     * @notice Emitted when NFTs are minted for a user.\r\n     * @param userAddress The address of the user receiving the NFTs.\r\n     * @param nftIds NFT IDs that were minted.\r\n     * @dev This event is emitted when new NFTs are created and assigned to a user.\r\n     * @dev It includes the user's address and the IDs of the minted NFTs for transparency.\r\n     */\r\n    event BatchMinted(address indexed userAddress, uint256[] nftIds);\r\n\r\n    /**\r\n     * @notice Emitted when the URI for a specific token is updated.\r\n     * @param tokenId The ID of the token for which the URI is updated.\r\n     * @param newTokenURI The new URI assigned to the token.\r\n     * @dev This event is emitted when the URI for a token is modified, providing transparency\r\n     * when metadata URIs are changed for specific tokens.\r\n     */\r\n    event TokenURISet(uint256 indexed tokenId, string indexed newTokenURI);\r\n\r\n    /**\r\n     * @notice Get token name.\r\n     * @return Token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get token symbol.\r\n     * @return Token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get the URI of a token.\r\n     * @param tokenId The ID of the token.\r\n     * @return The URI of the token.\r\n     */\r\n    function uri(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get the token URI for a given tokenId.\r\n     * @param tokenId The ID of the token.\r\n     * @return The URI of the token.\r\n     * @dev Diblicate for uri() method\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Set the URI for a token.\r\n     * @param tokenId The ID of the token.\r\n     * @param newTokenURI The new URI to set for the token.\r\n     * @dev Requires the MINTER_ROLE.\r\n     */\r\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) external;\r\n\r\n    /**\r\n     * @notice Set the URIs for multiple tokens in a batch.\r\n     * @param tokenIds An array of token IDs to set URIs for.\r\n     * @param newTokenURIs An array of new URIs to set for the tokens.\r\n     * @dev Requires the MINTER_ROLE.\r\n     * @dev Requires that the tokenIds and newTokenURIs arrays have the same length.\r\n     */\r\n    function setBatchTokenURI(uint256[] calldata tokenIds, string[] calldata newTokenURIs) external;\r\n\r\n    /**\r\n     * @notice Set the base URI for all tokens.\r\n     * @param newBaseURI The new base URI to set.\r\n     * @dev Requires the OPERATOR_ROLE.\r\n     */\r\n    function setBaseURI(string memory newBaseURI) external;\r\n\r\n    /**\r\n     * @notice Safely mints NFT for a user.\r\n     * @param to The NFT recipient.\r\n     * @param id The NFT id.\r\n     */\r\n    function safeMint(address to, uint256 id) external payable;\r\n\r\n    /**\r\n     * @notice Check if a given interface is supported by this contract.\r\n     * @param interfaceId The interface identifier to check for support.\r\n     * @return Whether the contract supports the specified interface.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ninterface ISchemaRegistry {\r\n    struct Schema {\r\n        string name;\r\n        string description;\r\n        string context;\r\n        string schemaString;\r\n    }\r\n\r\n    function router() external view returns (address);\r\n\r\n    function schemaIds(uint256 index) external view returns (bytes32);\r\n\r\n    function schemasIssuers(bytes32 id) external view returns (address);\r\n\r\n    function getIdFromSchemaString(string calldata schema) external pure returns (bytes32);\r\n\r\n    function createSchema(\r\n        string calldata name,\r\n        string calldata description,\r\n        string calldata context,\r\n        string calldata schemaString\r\n    ) external;\r\n\r\n    function updateContext(bytes32 schemaId, string calldata context) external;\r\n\r\n    function getSchema(bytes32 schemaId) external view returns (Schema memory);\r\n\r\n    function getSchemasNumber() external view returns (uint256);\r\n\r\n    function isRegistered(bytes32 schemaId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/certificates/interfaces/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nstruct AttestationPayload {\r\n    bytes32 schemaId; // The identifier of the schema this attestation adheres to.\r\n    uint64 expirationDate; // The expiration date of the attestation.\r\n    bytes subject; // The ID of the attestee, EVM address, DID, URL etc.\r\n    bytes attestationData; // The attestation data.\r\n}\r\n\r\nstruct Attestation {\r\n    bytes32 attestationId; // The unique identifier of the attestation.\r\n    bytes32 schemaId; // The identifier of the schema this attestation adheres to.\r\n    bytes32 replacedBy; // Whether the attestation was replaced by a new one.\r\n    address attester; // The address issuing the attestation to the subject.\r\n    address portal; // The id of the portal that created the attestation.\r\n    uint64 attestedDate; // The date the attestation is issued.\r\n    uint64 expirationDate; // The expiration date of the attestation.\r\n    uint64 revocationDate; // The date when the attestation was revoked.\r\n    uint16 version; // Version of the registry when the attestation was created.\r\n    bool revoked; // Whether the attestation is revoked or not.\r\n    bytes subject; // The ID of the attestee, EVM address, DID, URL etc.\r\n    bytes attestationData; // The attestation data.\r\n}\r\n\r\nstruct Schema {\r\n    string name; // The name of the schema.\r\n    string description; // A description of the schema.\r\n    string context; // The context of the schema.\r\n    string schema; // The schema definition.\r\n}\r\n\r\nstruct Portal {\r\n    address id; // The unique identifier of the portal.\r\n    address ownerAddress; // The address of the owner of this portal.\r\n    address[] modules; // Addresses of modules implemented by the portal.\r\n    bool isRevocable; // Whether attestations issued can be revoked.\r\n    string name; // The name of the portal.\r\n    string description; // A description of the portal.\r\n    string ownerName; // The name of the owner of this portal.\r\n}\r\n\r\nstruct Module {\r\n    address moduleAddress; // The address of the module.\r\n    string name; // The name of the module.\r\n    string description; // A description of the module.\r\n}\r\n"
    },
    "contracts/certificates/modules/RubyscoreFeeModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AbstractModule} from \"../abstracts/AbstractModule.sol\";\r\nimport {AttestationPayload} from \"../interfaces/Structs.sol\";\r\nimport {IPortalRegistry} from \"../interfaces/IPortalRegistry.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title Rubyscore Fee Module\r\n * @notice This module can be used by portal creators to enforce a fee on attestations.\r\n */\r\ncontract RubyscoreFeeModule is AbstractModule, Ownable {\r\n    mapping(bytes32 => uint256) public attestationFees;\r\n\r\n    /// @notice Error thrown when an array length mismatch occurs\r\n    error ArrayLengthMismatch();\r\n    /// @notice Error thrown when an invalid attestation fee is provided\r\n    error InvalidAttestationFee();\r\n    error ZeroAddressCheck();\r\n\r\n    event FeesSet(bytes32[] schemaIds, uint256[] attestationFees);\r\n\r\n    /**\r\n     * @notice Contract constructor sets the portal registry\r\n     */\r\n    constructor(address initialOwner) Ownable(initialOwner) {}\r\n\r\n    /**\r\n     * @notice Set the fee required to attest\r\n     * @param _attestationFees The fees required to attest\r\n     * @param schemaIds The schemaIds to set the fee for\r\n     */\r\n    function setFees(bytes32[] memory schemaIds, uint256[] memory _attestationFees) public onlyOwner {\r\n        if (schemaIds.length != _attestationFees.length) revert ArrayLengthMismatch();\r\n\r\n        for (uint256 i = 0; i < schemaIds.length; i++) {\r\n            attestationFees[schemaIds[i]] = _attestationFees[i];\r\n        }\r\n\r\n        emit FeesSet(schemaIds, _attestationFees);\r\n    }\r\n\r\n    /**\r\n     * @notice The main method for the module, running the check\r\n     * @param _value The value sent for the attestation\r\n     */\r\n    function run(\r\n        AttestationPayload memory _attestationPayload,\r\n        bytes memory /*_validationPayload*/,\r\n        address /*_txSender*/,\r\n        uint256 _value\r\n    ) public view override {\r\n        uint256 attestationFee = attestationFees[_attestationPayload.schemaId];\r\n        if (_value < attestationFee) revert InvalidAttestationFee();\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/modules/RubyscoreIssuanceModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AbstractModule} from \"../abstracts/AbstractModule.sol\";\r\nimport {AttestationPayload} from \"../interfaces/Structs.sol\";\r\nimport {IPortalRegistry} from \"../interfaces/IPortalRegistry.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IRubyscore_Certificates} from \"../interfaces/IRubyscore_Certificates.sol\";\r\n\r\n/**\r\n * @title Rubyscore Issuance Module\r\n * @notice This module can be used for issues NFT certificates .\r\n */\r\ncontract RubyscoreIssuanceModule is AbstractModule, Ownable {\r\n    address public portal;\r\n    IRubyscore_Certificates public certificateNFT;\r\n\r\n    mapping(bytes32 schemaId => uint256 certificateId) public certificates;\r\n\r\n    /// @notice Error thrown when an array length mismatch occurs\r\n    error ArrayLengthMismatch();\r\n    error InvalidCertificateId();\r\n    error ZeroAddressCheck();\r\n\r\n    modifier onlyPortal() {\r\n        require(msg.sender == portal, \"Not portal\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Contract constructor sets the portal registry\r\n     */\r\n    constructor(address initialOwner, address _portal, IRubyscore_Certificates _certificateNFT) Ownable(initialOwner) {\r\n        if (_portal == address(0)) revert ZeroAddressCheck();\r\n        if (address(_certificateNFT) == address(0)) revert ZeroAddressCheck();\r\n        portal = _portal;\r\n        certificateNFT = _certificateNFT;\r\n    }\r\n\r\n    function setUpCertificates(bytes32[] memory schemaIds, uint256[] memory certificateIds) external onlyOwner {\r\n        if (schemaIds.length != certificateIds.length) revert ArrayLengthMismatch();\r\n        for (uint256 i = 0; i < schemaIds.length; i++) {\r\n            certificates[schemaIds[i]] = certificateIds[i];\r\n        }\r\n    }\r\n\r\n    function setPortal(address _portal) external onlyOwner {\r\n        portal = _portal;\r\n    }\r\n\r\n    /**\r\n     * @notice The main method for the module, running the check\r\n     * @param _txSender Sender of transaction\r\n     */\r\n    function run(\r\n        AttestationPayload memory _attestationPayload,\r\n        bytes memory /*_validationPayload*/,\r\n        address _txSender,\r\n        uint256 /*_value*/\r\n    ) public override {\r\n        require(msg.sender == portal, \"Only Ruby portal\");\r\n        uint256 certificateId = certificates[_attestationPayload.schemaId];\r\n        if (certificateId == 0) revert InvalidCertificateId();\r\n        certificateNFT.safeMint(_txSender, certificateId);\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/modules/RubyscoreSignCheckModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AbstractModule} from \"../abstracts/AbstractModule.sol\";\r\nimport {AttestationPayload} from \"../interfaces/Structs.sol\";\r\nimport {IPortalRegistry} from \"../interfaces/IPortalRegistry.sol\";\r\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title Rubyscore Signature Check Module\r\n * @notice This module can be used by portal to\r\n *         require a signature from an authorized signer\r\n *         before issuing attestations.\r\n */\r\ncontract RubyscoreSignCheckModule is AbstractModule, EIP712, Ownable {\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant NAME = \"Rubyscore_SignCheckModule\";\r\n    string public constant VERSION = \"0.0.1\";\r\n\r\n    address private signer;\r\n\r\n    /// @notice Error thrown when an array length mismatch occurs\r\n    error ArrayLengthMismatch();\r\n    /// @notice Error thrown when a signer is not authorized by the module\r\n    error SignerNotAuthorized();\r\n\r\n    /// @notice Event emitted when the authorized signers are set\r\n    event SignerAuthorized(address signer);\r\n\r\n    /**\r\n     * @notice Contract constructor sets the portal registry\r\n     */\r\n    constructor(address initialOwner, address _signer) EIP712(NAME, VERSION) Ownable(initialOwner) {\r\n        require(_signer != address(0), \"Zero address check\");\r\n        signer = _signer;\r\n    }\r\n\r\n    function getSigner() external view returns (address) {\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the accepted status of schemaIds\r\n     * @param _signer The signers to be set\r\n     */\r\n    function setAuthorizedSigners(address _signer) public onlyOwner {\r\n        signer = _signer;\r\n        emit SignerAuthorized(signer);\r\n    }\r\n\r\n    /**\r\n     * @notice The main method for the module, running the check\r\n     * @param _attestationPayload The Payload of the attestation\r\n     * @param _validationPayload The validation payload required for the module\r\n     */\r\n    function run(\r\n        AttestationPayload memory _attestationPayload,\r\n        bytes memory _validationPayload,\r\n        address _txSender,\r\n        uint256 /*_value*/\r\n    ) public view override {\r\n        bytes32 digest = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        \"AttestationPayload(bytes32 schemaId,uint64 expirationDate,bytes subject,bytes attestationData)\"\r\n                    ),\r\n                    _attestationPayload.schemaId,\r\n                    _attestationPayload.expirationDate,\r\n                    keccak256(abi.encode(_txSender)),\r\n                    keccak256(_attestationPayload.attestationData)\r\n                )\r\n            )\r\n        );\r\n        if (signer != ECDSA.recover(digest, _validationPayload)) revert SignerNotAuthorized();\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/Rubyscore_Certificates.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {IRubyscore_Certificates} from \"./interfaces/IRubyscore_Certificates.sol\";\r\nimport {ERC1155URIStorage} from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\";\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport {ERC1155, ERC1155Supply} from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\n\r\n/**\r\n * @title Rubyscore_Certificates\r\n * @dev An ERC1155 token contract for minting and managing certificates with URI support.\r\n * @dev Rubyscore_Certificates can be minted by users with the MINTER_ROLE after proper authorization.\r\n * @dev Rubyscore_Certificates can have their URIs set by operators with the MINTER_ROLE.\r\n * @dev Rubyscore_Certificates can be safely transferred with restrictions on certain tokens.\r\n */\r\n\r\ncontract Rubyscore_Certificates is ERC1155, AccessControl, ERC1155Supply, ERC1155URIStorage, IRubyscore_Certificates {\r\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(ERC1155, AccessControl, IRubyscore_Certificates) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function totalSupply(uint256 id) public view override(ERC1155Supply) returns (uint256) {\r\n        return super.totalSupply(id);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function uri(\r\n        uint256 tokenId\r\n    ) public view override(ERC1155, ERC1155URIStorage, IRubyscore_Certificates) returns (string memory) {\r\n        return super.uri(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        return uri(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor for the Rubyscore_Achievement contract.\r\n     * @dev Initializes the contract with roles and settings.\r\n     * @param admin The address of the admin role, which has overall control.\r\n     * @param operator The address of the operator role, responsible for unlock tokens and set base URI.\r\n     * @param minter The address of the minter role, authorized to mint achievements and responsible for setting token URIs.\r\n     * @param baseURI The base URI for token metadata.\r\n     * @dev It sets the base URI for token metadata to the provided `baseURI`.\r\n     * @dev It grants the DEFAULT_ADMIN_ROLE, OPERATOR_ROLE, and MINTER_ROLE to the specified addresses.\r\n     * @dev It also initializes the contract with EIP712 support and ERC1155 functionality.\r\n     */\r\n    constructor(\r\n        address admin,\r\n        address operator,\r\n        address minter,\r\n        string memory baseURI,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC1155(\"ipfs://\") {\r\n        require(admin != address(0), \"Zero address check\");\r\n        require(operator != address(0), \"Zero address check\");\r\n        require(minter != address(0), \"Zero address check\");\r\n        name = _name;\r\n        symbol = _symbol;\r\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _grantRole(OPERATOR_ROLE, msg.sender);\r\n        _grantRole(OPERATOR_ROLE, operator);\r\n        _grantRole(MINTER_ROLE, minter);\r\n        _setBaseURI(baseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) public onlyRole(OPERATOR_ROLE) {\r\n        super._setURI(tokenId, newTokenURI);\r\n        emit TokenURISet(tokenId, newTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function setBatchTokenURI(\r\n        uint256[] calldata tokenIds,\r\n        string[] calldata newTokenURIs\r\n    ) external onlyRole(OPERATOR_ROLE) {\r\n        require(tokenIds.length == newTokenURIs.length, \"Invalid params\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            setTokenURI(tokenIds[i], newTokenURIs[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function setBaseURI(string memory newBaseURI) external onlyRole(OPERATOR_ROLE) {\r\n        super._setBaseURI(newBaseURI);\r\n        emit BaseURISet(newBaseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function safeMint(address to, uint256 nftId) external payable onlyRole(MINTER_ROLE) {\r\n        _mint(to, nftId, \"\");\r\n        emit Minted(to, nftId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function safeBatchMint(address to, uint256[] memory nftIds) external payable onlyRole(MINTER_ROLE) {\r\n        _mintBatch(to, nftIds, \"\");\r\n        emit BatchMinted(to, nftIds);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Certificates}\r\n     */\r\n    function _mint(address to, uint256 id, bytes memory data) internal {\r\n        // require(balanceOf(to, id) == 0, \"You already have this certificate\");\r\n        super._mint(to, id, 1, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to safely mint multiple NFTs in a batch for a specified recipient.\r\n     * @param to The address of the recipient to mint the NFTs for.\r\n     * @param ids An array of NFT IDs to mint.\r\n     * @param data Additional data to include in the minting transaction.\r\n     * @dev This function checks if the recipient already owns any of the specified NFTs to prevent duplicates.\r\n     * @dev It is intended for batch minting operations where multiple NFTs can be minted at once.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, bytes memory data) internal {\r\n        uint256[] memory amounts = new uint256[](ids.length);\r\n        for (uint8 i = 0; i < ids.length; i++) {\r\n            require(balanceOf(to, ids[i]) == 0, \"You already have this certificate\");\r\n            amounts[i] = 1;\r\n        }\r\n        super._mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n    function _update(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) internal override(ERC1155, ERC1155Supply) {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            if (from != address(0)) revert(\"This token only for you\");\r\n        }\r\n        super._update(from, to, ids, values);\r\n    }\r\n}\r\n"
    },
    "contracts/certificates/RubyScorePortalClean.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AbstractPortal} from \"./abstracts/AbstractPortal.sol\";\r\nimport {AttestationPayload} from \"./interfaces/Structs.sol\";\r\n\r\n/**\r\n * @title Default Portal\r\n * @author Consensys\r\n * @notice This contract aims to provide a default portal\r\n * @dev This Portal does not add any logic to the AbstractPortal\r\n */\r\ncontract RubyScorePortalClean is AbstractPortal {\r\n    bytes32 schema;\r\n\r\n    /**\r\n     * @notice Contract constructor\r\n     * @param modules list of modules to use for the portal (can be empty)\r\n     * @param router the Router's address\r\n     * @dev This sets the addresses for the AttestationRegistry, ModuleRegistry and PortalRegistry\r\n     */\r\n    constructor(address[] memory modules, address router) AbstractPortal(modules, router) {}\r\n\r\n    function setSchema(bytes32 _schema) external {\r\n        schema = _schema;\r\n    }\r\n\r\n    //TODO: only owner\r\n    function addModule(address module) external {\r\n        modules.push(module);\r\n    }\r\n\r\n    //TODO: only owner\r\n    function removeModules() external {\r\n        delete modules;\r\n    }\r\n\r\n    struct AttestationRequestData {\r\n        uint256 level;\r\n        bool onchain;\r\n    }\r\n\r\n    // struct AttestationPayload {\r\n    //     bytes32 schemaId; // The identifier of the schema this attestation adheres to.\r\n    //     uint64 expirationDate; // The expiration date of the attestation.\r\n    //     bytes subject; // The ID of the attestee, EVM address, DID, URL etc.\r\n    //     bytes attestationData; // The attestation data.\r\n    // }\r\n\r\n    function attestScoreSimple(uint64 level, bool onchain, bytes memory signature) public payable {\r\n        AttestationRequestData memory attestationRequestData = AttestationRequestData(level, onchain);\r\n        bytes[] memory validationPayload = new bytes[](1);\r\n        validationPayload[0] = signature;\r\n        attestScore(attestationRequestData, validationPayload);\r\n    }\r\n\r\n    function attestScore(\r\n        AttestationRequestData memory attestationRequestData,\r\n        bytes[] memory validationPayload\r\n    ) internal {\r\n        bytes memory attestationData = abi.encodePacked(attestationRequestData.level, attestationRequestData.onchain);\r\n        AttestationPayload memory attestationPayload = AttestationPayload(\r\n            schema,\r\n            1767786495,\r\n            abi.encode(msg.sender),\r\n            attestationData\r\n        );\r\n        super.attest(attestationPayload, validationPayload);\r\n    }\r\n\r\n    function bulkAttest0xScore(\r\n        AttestationRequestData[] memory attestationsRequests,\r\n        bytes[] memory validationPayload\r\n    ) public {\r\n        for (uint256 i = 0; i < attestationsRequests.length; i++) {\r\n            attestScore(attestationsRequests[i], validationPayload);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc AbstractPortal\r\n    function withdraw(address payable to, uint256 amount) external override {}\r\n}\r\n"
    },
    "contracts/certificates/RubyScoreVeraxPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {AbstractPortal} from \"./abstracts/AbstractPortal.sol\";\r\nimport {AttestationPayload} from \"./interfaces/Structs.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IRubyscore_Certificates} from \"./interfaces/IRubyscore_Certificates.sol\";\r\n\r\n/**\r\n * @title RubyScoreVeraxPortal\r\n * @dev RubyScoreVeraxPortal is a smart contract that handles the attestation process for RubyScore certificates.\r\n * It manages fees, signatures based on specific schemas.\r\n */\r\ncontract RubyScoreVeraxPortal is AbstractPortal, Ownable, Pausable {\r\n    // State variables\r\n    bool public bulkStatus = false;\r\n    bool public feeStatus = true;\r\n\r\n    // Storage\r\n    mapping(bytes32 => bool) public certificates; // schemaId => certificateStatus\r\n    mapping(bytes32 => uint256) public attestationFees; // schemaId => attestationFee\r\n\r\n    // Errors\r\n    error InvalidCertificateId();\r\n    error ArrayLengthMismatch();\r\n    error InvalidAttestationFee();\r\n    error ZeroAddressCheck();\r\n    error WithdrawFail();\r\n\r\n    // Events\r\n    event FeesSet(bytes32[] schemaIds, uint256[] attestationFees);\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param modules List of modules to use for the portal.\r\n     * @param router The Router's address.\r\n     */\r\n    constructor(address[] memory modules, address router) AbstractPortal(modules, router) Ownable(msg.sender) {\r\n        if (router == address(0)) revert ZeroAddressCheck();\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the provided value meets the attestation fee requirement.\r\n     * @param schemaId The schemaId for which to check the fee.\r\n     * @param _value The value sent for the attestation.\r\n     */\r\n    function checkFee(bytes32 schemaId, uint256 _value) public view {\r\n        if (_value < attestationFees[schemaId]) revert InvalidAttestationFee();\r\n    }\r\n\r\n    /**\r\n     * @dev Set the fee, signature, and issuance statuses.\r\n     * @param fee Fee status.\r\n     */\r\n    function setCheckStatuses(bool fee, bool bulk) external onlyOwner {\r\n        feeStatus = fee;\r\n        bulkStatus = bulk;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new module to the list of modules.\r\n     * @param module The address of the new module.\r\n     */\r\n    function addModule(address module) external onlyOwner {\r\n        modules.push(module);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove all modules from the list of modules.\r\n     */\r\n    function removeModules() external onlyOwner whenPaused {\r\n        delete modules;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the fees for specific schemaIds.\r\n     * @param schemaIds The schemaIds to set the fee for.\r\n     * @param _attestationFees The fees required to attest.\r\n     */\r\n    function setFees(bytes32[] memory schemaIds, uint256[] memory _attestationFees) public onlyOwner {\r\n        if (schemaIds.length != _attestationFees.length) revert ArrayLengthMismatch();\r\n        for (uint256 i = 0; i < schemaIds.length; i++) {\r\n            attestationFees[schemaIds[i]] = _attestationFees[i];\r\n        }\r\n        emit FeesSet(schemaIds, _attestationFees);\r\n    }\r\n\r\n    /**\r\n     * @dev Set up certificate mappings for schemaIds.\r\n     * @param schemaIds The schemaIds for which to set up certificates.\r\n     * @param certificateStatuses The corresponding certificate statuses.\r\n     */\r\n    function setUpCertificates(bytes32[] calldata schemaIds, bool[] calldata certificateStatuses) public onlyOwner {\r\n        if (schemaIds.length != certificateStatuses.length) revert ArrayLengthMismatch();\r\n        for (uint256 i = 0; i < schemaIds.length; i++) {\r\n            certificates[schemaIds[i]] = certificateStatuses[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Attest a score with a given attestation payload and validation payloads.\r\n     * @param attestationPayload The payload of the attestation.\r\n     * @param validationPayload The validation payload required for the module.\r\n     */\r\n    function attestRubyscore(\r\n        AttestationPayload memory attestationPayload,\r\n        bytes[] memory validationPayload\r\n    ) external payable {\r\n        super.attest(attestationPayload, validationPayload);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH from the contract.\r\n     * @param to The address to which the ETH will be withdrawn.\r\n     * @param amount The amount of ETH to withdraw.\r\n     */\r\n    function withdraw(address payable to, uint256 amount) external override onlyOwner {\r\n        (bool status, ) = to.call{value: amount}(\"\");\r\n        if (!status) revert WithdrawFail();\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method run before a payload is attested\r\n     * @param attestationPayload the attestation payload supposed to be attested\r\n     * @param attester the address of the attester\r\n     * @param value the value sent with the attestation\r\n     */\r\n    function _onAttest(\r\n        AttestationPayload memory attestationPayload,\r\n        address attester,\r\n        uint256 value\r\n    ) internal override whenNotPaused {\r\n        if (!certificates[attestationPayload.schemaId]) revert InvalidCertificateId();\r\n        if (feeStatus) checkFee(attestationPayload.schemaId, value);\r\n        super._onAttest(attestationPayload, attester, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method run when attesting a batch of payloads\r\n     */\r\n    function _onBulkAttest(\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) internal override whenNotPaused {\r\n        if (!bulkStatus) revert(\"Only single attest\");\r\n        for (uint256 i = 0; i < attestationsPayloads.length; i++) {\r\n            if (!certificates[attestationsPayloads[i].schemaId]) revert InvalidCertificateId();\r\n        }\r\n        super._onBulkAttest(attestationsPayloads, validationPayloads);\r\n    }\r\n\r\n    /**\r\n     * @notice Optional method run when an attestation is replaced\r\n     * @param attestationId the ID of the attestation being replaced\r\n     * @param attestationPayload the attestation payload to create attestation and register it\r\n     * @param attester the address of the attester\r\n     * @param value the value sent with the attestation\r\n     */\r\n    function _onReplace(\r\n        bytes32 attestationId,\r\n        AttestationPayload memory attestationPayload,\r\n        address attester,\r\n        uint256 value\r\n    ) internal override whenNotPaused {\r\n        if (!certificates[attestationPayload.schemaId]) revert InvalidCertificateId();\r\n        if (feeStatus) checkFee(attestationPayload.schemaId, value);\r\n        super._onReplace(attestationId, attestationPayload, attester, value);\r\n    }\r\n\r\n    function _onBulkReplace(\r\n        bytes32[] memory attestationIds,\r\n        AttestationPayload[] memory attestationsPayloads,\r\n        bytes[][] memory validationPayloads\r\n    ) internal override whenNotPaused {\r\n        if (!bulkStatus) revert(\"Only single replace\");\r\n        for (uint256 i = 0; i < attestationsPayloads.length; i++) {\r\n            if (!certificates[attestationsPayloads[i].schemaId]) revert InvalidCertificateId();\r\n        }\r\n        super._onBulkReplace(attestationIds, attestationsPayloads, validationPayloads);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRubyscore_Achievement.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.21;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @title IRubyscore_Achievement\r\n * @dev IRubyscore_Achievement is an interface for Rubyscore_Achievement contract\r\n */\r\ninterface IRubyscore_Achievement is IERC1155 {\r\n    struct MintParams {\r\n        address userAddress; // Address of the buyer.\r\n        uint256 userNonce; // Nonce associated with the user's address for preventing replay attacks.\r\n        uint256[] nftIds; // ids of NFTs to mint\r\n    }\r\n\r\n    /**\r\n     * @notice Emitted when the base URI for token metadata is updated.\r\n     * @param newBaseURI The new base URI that will be used to construct token metadata URIs.\r\n     * @dev This event is triggered when the contract operator updates the base URI\r\n     * for retrieving metadata associated with tokens. The 'newBaseURI' parameter represents\r\n     * the updated base URI.\r\n     */\r\n    event BaseURISet(string indexed newBaseURI);\r\n\r\n    /**\r\n     * @notice Emitted when NFTs are minted for a user.\r\n     * @param userAddress The address of the user receiving the NFTs.\r\n     * @param userNonce The user's nonce used to prevent replay attacks.\r\n     * @param nftIds An array of NFT IDs that were minted.\r\n     * @dev This event is emitted when new NFTs are created and assigned to a user.\r\n     * @dev It includes the user's address, nonce, and the IDs of the minted NFTs for transparency.\r\n     */\r\n    event Minted(address indexed userAddress, uint256 indexed userNonce, uint256[] nftIds);\r\n\r\n    /**\r\n     * @notice Emitted when the URI for a specific token is updated.\r\n     * @param tokenId The ID of the token for which the URI is updated.\r\n     * @param newTokenURI The new URI assigned to the token.\r\n     * @dev This event is emitted when the URI for a token is modified, providing transparency\r\n     * when metadata URIs are changed for specific tokens.\r\n     */\r\n    event TokenURISet(uint256 indexed tokenId, string indexed newTokenURI);\r\n\r\n    /**\r\n     * @notice Emitted when the transfer lock status for a token is updated.\r\n     * @param tokenId The ID of the token for which the transfer lock status changes.\r\n     * @param lock The new transfer lock status (true for locked, false for unlocked).\r\n     * @dev This event is emitted when the transfer lock status of a specific token is modified.\r\n     * @dev It provides transparency regarding whether a token can be transferred or not.\r\n     */\r\n    event TokenUnlockSet(uint256 indexed tokenId, bool indexed lock);\r\n\r\n    /**\r\n     * @notice Emitted when the price for a token mint is updated.\r\n     * @param newPrice The new price for mint.\r\n     * @dev This event is emitted when the price for mint a token is modified.\r\n     */\r\n    event PriceUpdated(uint256 newPrice);\r\n\r\n    /**\r\n     * @notice Get token name.\r\n     * @return Token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get token symbol.\r\n     * @return Token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get the URI of a token.\r\n     * @param tokenId The ID of the token.\r\n     * @return The URI of the token.\r\n     */\r\n    function uri(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Get the transfer status of a token.\r\n     * @param tokenId The ID of the token.\r\n     * @return Whether the token's transfer is unlocked (true) or restricted (false).\r\n     */\r\n    function getTransferStatus(uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Get the user's nonce associated with their address.\r\n     * @param userAddress The address of the user.\r\n     * @return The user's nonce.\r\n     */\r\n    function getUserNonce(address userAddress) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the token URI for a given tokenId.\r\n     * @param tokenId The ID of the token.\r\n     * @return The URI of the token.\r\n     * @dev Diblicate for uri() method\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Set the URI for a token.\r\n     * @param tokenId The ID of the token.\r\n     * @param newTokenURI The new URI to set for the token.\r\n     * @dev Requires the MINTER_ROLE.\r\n     */\r\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) external;\r\n\r\n    /**\r\n     * @notice Set the URIs for multiple tokens in a batch.\r\n     * @param tokenIds An array of token IDs to set URIs for.\r\n     * @param newTokenURIs An array of new URIs to set for the tokens.\r\n     * @dev Requires the MINTER_ROLE.\r\n     * @dev Requires that the tokenIds and newTokenURIs arrays have the same length.\r\n     */\r\n    function setBatchTokenURI(uint256[] calldata tokenIds, string[] calldata newTokenURIs) external;\r\n\r\n    /**\r\n     * @notice Set the base URI for all tokens.\r\n     * @param newBaseURI The new base URI to set.\r\n     * @dev Requires the OPERATOR_ROLE.\r\n     */\r\n    function setBaseURI(string memory newBaseURI) external;\r\n\r\n    /**\r\n     * @notice Safely mints NFTs for a user based on provided parameters and a valid minter signature.\r\n     * @param mintParams The struct containing user address, user nonce, and NFT IDs to mint.\r\n     * @param operatorSignature The ECDSA signature of the data, validating the operator's role.\r\n     * @dev This function safely mints NFTs for a user while ensuring the validity of the operator's signature.\r\n     * @dev It requires that the provided NFT IDs are valid and that the operator has the MINTER_ROLE.\r\n     * @dev User nonces are used to prevent replay attacks.\r\n     * @dev Multiple NFTs can be minted in a batch or a single NFT can be minted based on the number of NFT IDs provided.\r\n     * @dev Emits the 'Minted' event to indicate the successful minting of NFTs.\r\n     */\r\n    function safeMint(MintParams memory mintParams, bytes calldata operatorSignature) external payable;\r\n\r\n    event Withdrawed(uint256 amount);\r\n\r\n    /**\r\n     * @notice Sets the transfer lock status for a specific token ID.\r\n     * @param tokenId The ID of the token to set the transfer lock status for.\r\n     * @param lock The boolean value to determine whether transfers of this token are locked or unlocked.\r\n     * @dev This function can only be called by an operator with the OPERATOR_ROLE.\r\n     * @dev It allows operators to control the transferability of specific tokens.\r\n     * @dev Emits the 'tokenUnlockSet' event to indicate the change in transfer lock status.\r\n     */\r\n    function setTransferUnlock(uint256 tokenId, bool lock) external;\r\n\r\n    /**\r\n     * @notice Check if a given interface is supported by this contract.\r\n     * @param interfaceId The interface identifier to check for support.\r\n     * @return Whether the contract supports the specified interface.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    function withdraw() external;\r\n}\r\n"
    },
    "contracts/interfaces/IRubyscore_Profile.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.21;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title IRubyscore_Profile\r\n * @dev IRubyscore_Profile is an interface for Rubyscore_Profile contract\r\n */\r\ninterface IRubyscore_Profile is IERC721 {\r\n    /**\r\n     * @notice Emitted when a user successfully claims a unique name as an NFT.\r\n     * @param account The address of the account claiming the name.\r\n     * @param tokenId The unique token ID associated with the claimed name.\r\n     * @param name The name that was successfully claimed.\r\n     * @param premium The premium status of name that was successfully claimed.\r\n     */\r\n    event NameClaimed(address indexed account, uint256 indexed tokenId, string name, bool indexed premium);\r\n\r\n    event PremiumPriceUpdated(uint256 newPremiumPrice);\r\n\r\n    /**\r\n     * @notice Emitted when the base URI for token metadata is updated.\r\n     * @param newBaseURI The new base URI used to construct token metadata URIs.\r\n     */\r\n    event URIUpdated(string indexed newBaseURI);\r\n\r\n    event Withdrawed(uint256 amount);\r\n\r\n    /**\r\n     * @notice Emitted when the base extension for token metadata is updated.\r\n     * @param newBaseExtension The new base extension used for token metadata files.\r\n     */\r\n    event ExtensionUpdated(string indexed newBaseExtension);\r\n\r\n    /**\r\n     * @notice Converts a name string to a unique identifier (ID).\r\n     * @param name The name to convert to an ID.\r\n     * @return The unique ID corresponding to the given name.\r\n     */\r\n    function getIdByName(string calldata name) external pure returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the base URI for token metadata.\r\n     * @return The current base URI.\r\n     */\r\n    function getBaseURI() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Gets the base extension for token metadata.\r\n     * @return The current base extension.\r\n     */\r\n    function getBaseExtension() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Retrieves the current premium price for a specific feature.\r\n     * @dev This function allows anyone to check the current premium price without modifying it.\r\n     * @return The current premium price as a uint256.\r\n     */\r\n    function getPremiumPrice() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Checks the premium status for a user.\r\n     * @dev This function allows anyone to check if a specific user has a premium status.\r\n     * @param userAddress The address of the user to check.\r\n     * @return A boolean indicating whether the user has a premium status (true) or not (false).\r\n     */\r\n    function getPremiumStatus(address userAddress) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Checks the availability of a given name and converts it into a unique token ID.\r\n     * @param name The name to check and convert.\r\n     * @return status True if the name is valid and available; otherwise, false.\r\n     * @return tokenId The unique token ID corresponding to the normalized name.\r\n     */\r\n    function checkName(string calldata name) external view returns (bool, uint256);\r\n\r\n    /**\r\n     * @notice Checks if a user has claimed a name.\r\n     * @param _user The user's address to check.\r\n     * @return True if the user has claimed a name, otherwise false.\r\n     */\r\n    function hasName(address _user) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Gets the owner of a name by its string representation.\r\n     * @param name The name to look up.\r\n     * @return The address of the owner of the name, or address(0) if the name does not exist.\r\n     */\r\n    function getOwnerByName(string calldata name) external view returns (address);\r\n\r\n    /**\r\n     * @notice Gets the name claimed by a specific user.\r\n     * @param userAddress The address of the user.\r\n     * @return The name claimed by the user, if they have claimed a name.\r\n     */\r\n    function getNameByOwner(address userAddress) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Gets the unique identifier (ID) for a name claimed by a user.\r\n     * @param userAddress The address of the user.\r\n     * @return The unique ID for the user's claimed name.\r\n     */\r\n    function getIdByOwner(address userAddress) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the name claimed by the owner of a specific ID.\r\n     * @param id The unique ID for which to retrieve the claimed name.\r\n     * @return The name claimed by the owner of the given ID, or an empty string if the ID does not exist.\r\n     */\r\n    function getNameById(uint256 id) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Checks if a given interface is supported by this contract.\r\n     * @param interfaceId The interface identifier (ERC-165) to check for support.\r\n     * @return Whether the contract supports the specified interface (true or false).\r\n     * @dev This function overrides the standard supportsInterface function to include AccessControl functionality.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Claims a unique name for the calling user.\r\n     * @dev The name must be unique, and the caller cannot have already claimed a name.\r\n     * @param name The desired name to claim.\r\n     */\r\n\r\n    /**\r\n     * @notice Allows users to claim a unique name, optionally with a premium status.\r\n     * @dev Users can claim a name by providing a name string and, if desired, by paying a premium fee.\r\n     * @param name The name to be claimed. It must be unique and follow specific length requirements.\r\n     * @dev Requirements:\r\n     *   - The provided name must be unique among all users.\r\n     *   - If a premium fee is required, it must be sent along with the transaction.\r\n     *   - Premium names must have a length greater than 2 characters.\r\n     *   - NOT Premium names must have a length greater than 6 characters.\r\n     *   - Names must have a length less than 21 characters.\r\n     * @dev Effects:\r\n     *   - If the user claims a premium name and pays the premium fee:\r\n     *     - Their premium status is set to true.\r\n     *     - If the user already had a name and field `name` is empty, the previous name is NOT replaced with the new one.\r\n     *     - If the user already had a name and field `name` is NOT empty, the previous name is replaced with the new one.\r\n     *   - If the user claims a non-premium name (no fee required):\r\n     *     - Their premium status remains unchanged (either true or false).\r\n     *     - The provided name must adhere to the length requirements.\r\n     *     - If the user already had a name, transaction will reverted.\r\n     * @dev Emits:\r\n     *   - NameClaimed: Upon successful name claim, this event is emitted with details of the user's claim.\r\n     * @return tokenId : The unique identifier (ID) associated with the user and claimed name.\r\n     */\r\n    function claimName(string calldata name) external payable returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @notice Returns the token URI for a given token ID.\r\n     * @param tokenId The ID of the token.\r\n     * @return The URI for the token's metadata.\r\n     */\r\n    function tokenURI(uint256 tokenId) external returns (string memory);\r\n\r\n    /**\r\n     * @notice Updates the base extension for token metadata.\r\n     * @dev This function can only be called by operators.\r\n     * @param newBaseExtension The new base extension to set.\r\n     */\r\n    function updateBaseExtension(string memory newBaseExtension) external;\r\n\r\n    /**\r\n     * @notice Updates the base URI for token metadata.\r\n     * @dev This function can only be called by operators.\r\n     * @param newBaseURI The new base URI to set.\r\n     */\r\n    function updateBaseURI(string memory newBaseURI) external;\r\n\r\n    /**\r\n     * @notice Updates the premium price for a specific feature.\r\n     * @param newPremiumPrice The new premium price to set.\r\n     * @dev This function can only be called by addresses with the OPERATOR_ROLE.\r\n     * It allows an operator to modify the premium price associated with a particular feature or service.\r\n     * Emits a 'PremiumPriceUpdated' event with the new premium price.\r\n     */\r\n    function updatePremiumPrice(uint256 newPremiumPrice) external;\r\n\r\n    /**function updatePremiumPrice(uint256 newPremiumPrice) external\r\n     * @notice Allows the contract owner to withdraw the Ether balance from the contract.\r\n     * @dev This function can only be called by the contract owner, typically the DEFAULT_ADMIN_ROLE.\r\n     * It transfers the entire Ether balance held by the contract to the owner's address.\r\n     * Emits a 'Withdrawed' event with the amount of Ether withdrawn.\r\n     */\r\n    function withdraw() external;\r\n}\r\n"
    },
    "contracts/lib/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n"
    },
    "contracts/Rubyscore_Achievement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {IRubyscore_Achievement} from \"./interfaces/IRubyscore_Achievement.sol\";\r\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport {ERC1155URIStorage} from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\";\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport {ERC1155, ERC1155Supply} from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\n\r\n/**\r\n * @title Rubyscore_Achievement\r\n * @dev An ERC1155 token contract for minting and managing achievements with URI support.\r\n * @dev Rubyscore_Achievement can be minted by users with the MINTER_ROLE after proper authorization.\r\n * @dev Rubyscore_Achievement can have their URIs set by operators with the MINTER_ROLE.\r\n * @dev Rubyscore_Achievement can be safely transferred with restrictions on certain tokens.\r\n */\r\ncontract Rubyscore_Achievement is\r\n    ERC1155,\r\n    EIP712,\r\n    AccessControl,\r\n    ERC1155Supply,\r\n    ERC1155URIStorage,\r\n    ReentrancyGuard,\r\n    IRubyscore_Achievement\r\n{\r\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    string public constant NAME = \"Rubyscore_Achievement\";\r\n    string public constant VERSION = \"0.0.1\";\r\n\r\n    uint256 private price;\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    mapping(uint256 => bool) private transferUnlock;\r\n    mapping(address => uint256) private userNonce;\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(ERC1155, AccessControl, IRubyscore_Achievement) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function uri(\r\n        uint256 tokenId\r\n    ) public view override(ERC1155, ERC1155URIStorage, IRubyscore_Achievement) returns (string memory) {\r\n        return super.uri(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function getTransferStatus(uint256 tokenId) external view returns (bool) {\r\n        return transferUnlock[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function getPrice() external view returns (uint256) {\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function getUserNonce(address userAddress) external view returns (uint256) {\r\n        return userNonce[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        return uri(tokenId);\r\n    }\r\n\r\n    //TODO: use ERC1155(\"https://xproject.api/achivments/\") like error URI and set new for ERC1155URIStorage\r\n\r\n    /**\r\n     * @notice Constructor for the Rubyscore_Achievement contract.\r\n     * @dev Initializes the contract with roles and settings.\r\n     * @param admin The address of the admin role, which has overall control.\r\n     * @param operator The address of the operator role, responsible for unlock tokens and set base URI.\r\n     * @param minter The address of the minter role, authorized to mint achievements and responsible for setting token URIs.\r\n     * @param baseURI The base URI for token metadata.\r\n     * @dev It sets the base URI for token metadata to the provided `baseURI`.\r\n     * @dev It grants the DEFAULT_ADMIN_ROLE, OPERATOR_ROLE, and MINTER_ROLE to the specified addresses.\r\n     * @dev It also initializes the contract with EIP712 support and ERC1155 functionality.\r\n     */\r\n    constructor(\r\n        address admin,\r\n        address operator,\r\n        address minter,\r\n        string memory baseURI,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC1155(\"ipfs://\") EIP712(NAME, VERSION) {\r\n        require(admin != address(0), \"Zero address check\");\r\n        require(operator != address(0), \"Zero address check\");\r\n        require(minter != address(0), \"Zero address check\");\r\n        name = _name;\r\n        symbol = _symbol;\r\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _grantRole(OPERATOR_ROLE, msg.sender);\r\n        _grantRole(OPERATOR_ROLE, operator);\r\n        _grantRole(MINTER_ROLE, minter);\r\n        _setBaseURI(baseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) public onlyRole(MINTER_ROLE) {\r\n        super._setURI(tokenId, newTokenURI);\r\n        emit TokenURISet(tokenId, newTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function setBatchTokenURI(\r\n        uint256[] calldata tokenIds,\r\n        string[] calldata newTokenURIs\r\n    ) external onlyRole(MINTER_ROLE) {\r\n        require(tokenIds.length == newTokenURIs.length, \"Invalid params\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            setTokenURI(tokenIds[i], newTokenURIs[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function setBaseURI(string memory newBaseURI) external onlyRole(OPERATOR_ROLE) {\r\n        super._setBaseURI(newBaseURI);\r\n        emit BaseURISet(newBaseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function setPrice(uint256 newPrice) external onlyRole(OPERATOR_ROLE) {\r\n        price = newPrice;\r\n        emit PriceUpdated(newPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function safeMint(MintParams memory mintParams, bytes calldata operatorSignature) external payable nonReentrant {\r\n        require(mintParams.nftIds.length >= 1, \"Invalid NFT ids\");\r\n        require(msg.value == price, \"Wrong payment amount\");\r\n        bytes32 digest = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"MintParams(address userAddress,uint256 userNonce,uint256[] nftIds)\"),\r\n                    msg.sender,\r\n                    userNonce[msg.sender],\r\n                    keccak256(abi.encodePacked(mintParams.nftIds))\r\n                )\r\n            )\r\n        );\r\n        _checkRole(MINTER_ROLE, ECDSA.recover(digest, operatorSignature));\r\n        userNonce[mintParams.userAddress] += 1;\r\n        if (mintParams.nftIds.length > 1) _mintBatch(mintParams.userAddress, mintParams.nftIds, \"\");\r\n        else _mint(mintParams.userAddress, mintParams.nftIds[0], \"\");\r\n        emit Minted(mintParams.userAddress, mintParams.userNonce, mintParams.nftIds);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function setTransferUnlock(uint256 tokenId, bool lock) external onlyRole(OPERATOR_ROLE) {\r\n        transferUnlock[tokenId] = lock;\r\n        emit TokenUnlockSet(tokenId, lock);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function withdraw() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        uint256 amount = address(this).balance;\r\n        require(amount > 0, \"Zero amount to withdraw\");\r\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Withdrawed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Achievement}\r\n     */\r\n    function _mint(address to, uint256 id, bytes memory data) internal {\r\n        require(balanceOf(to, id) == 0, \"You already have this achievement\");\r\n        super._mint(to, id, 1, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to safely mint multiple NFTs in a batch for a specified recipient.\r\n     * @param to The address of the recipient to mint the NFTs for.\r\n     * @param ids An array of NFT IDs to mint.\r\n     * @param data Additional data to include in the minting transaction.\r\n     * @dev This function checks if the recipient already owns any of the specified NFTs to prevent duplicates.\r\n     * @dev It is intended for batch minting operations where multiple NFTs can be minted at once.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, bytes memory data) internal {\r\n        uint256[] memory amounts = new uint256[](ids.length);\r\n        for (uint8 i = 0; i < ids.length; i++) {\r\n            require(balanceOf(to, ids[i]) == 0, \"You already have this achievement\"); // TODO: custom error with problem token id\r\n            amounts[i] = 1;\r\n        }\r\n        super._mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _update(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) internal override(ERC1155, ERC1155Supply) {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            if (!transferUnlock[ids[i]] && from != address(0)) revert(\"This token only for you\");\r\n        }\r\n        super._update(from, to, ids, values);\r\n    }\r\n}\r\n"
    },
    "contracts/Rubyscore_Profile.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport {Counters} from \"./lib/Counters.sol\";\r\nimport {IRubyscore_Profile} from \"./interfaces/IRubyscore_Profile.sol\";\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n/**\r\n * @title Rubyscore_Profile\r\n * @dev Rubyscore_Profile is an SBT ERC721-based smart contract for claiming and managing user names.\r\n * Users can claim unique names represented by ERC721 tokens.\r\n * Names are normalized to lowercase and can consist of lowercase letters and selected special characters.\r\n * The contract is NOT upgradeable and has role-based access control.\r\n */\r\ncontract Rubyscore_Profile is ERC721, AccessControl, IRubyscore_Profile {\r\n    using Counters for Counters.Counter;\r\n\r\n    // Role for operators who can manage the contract\r\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n\r\n    // Base URI for token metadata\r\n    string private baseURI = \"https://api.rubyscore.io/nft/profile/\";\r\n    // Base extension for token metadata\r\n    string private baseExtension;\r\n    // Price for premium name\r\n    uint256 private premiumPrice;\r\n\r\n    // Mapping from user address to premium status\r\n    mapping(address => bool) private userPremiumStatus;\r\n    // Mapping from user address to their claimed name\r\n    mapping(address => string) private _userToName;\r\n    // Counter for token IDs\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getIdByName(string calldata name) external pure returns (uint256) {\r\n        return _convertNameToId(name);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getBaseURI() external view returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getBaseExtension() external view returns (string memory) {\r\n        return baseExtension;\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function checkName(string calldata name) external view returns (bool, uint256) {\r\n        (string memory normalizedName, bool status) = _normalizeName(name);\r\n        require(status, \"Name is invalid\");\r\n        uint256 tokenId = _convertStringToUint256(normalizedName);\r\n        require(!exists(tokenId), \"Name is occupied\");\r\n        return (status, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getPremiumPrice() external view returns (uint256) {\r\n        return premiumPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getPremiumStatus(address userAddress) external view returns (bool) {\r\n        return userPremiumStatus[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getOwnerByName(string calldata name) external view returns (address) {\r\n        uint256 id = _convertNameToId(name);\r\n        if (!exists(id)) return address(0);\r\n        return ownerOf(id);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getNameByOwner(address userAddress) external view returns (string memory) {\r\n        require(balanceOf(userAddress) > 0, \"User does not have a name\");\r\n        return _userToName[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getNameById(uint256 id) external view returns (string memory) {\r\n        if (!exists(id)) return \"\";\r\n        address tokenOwner = ownerOf(id);\r\n        return _userToName[tokenOwner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function getIdByOwner(address userAddress) public view returns (uint256) {\r\n        require(balanceOf(userAddress) > 0, \"User does not have a name\");\r\n        (string memory name, ) = _normalizeName(_userToName[userAddress]);\r\n        return _convertStringToUint256(name);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override(ERC721, IRubyscore_Profile) returns (string memory) {\r\n        require(exists(tokenId), \"URI query for nonexistent token\");\r\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId), baseExtension));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function hasName(address _user) public view returns (bool) {\r\n        return bytes(_userToName[_user]).length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(ERC721, AccessControl, IRubyscore_Profile) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor to initialize the contract with admin and operator addresses.\r\n     * @param admin Address of the contract admin.\r\n     * @param operator Address of the contract operator.\r\n     */\r\n    constructor(address admin, address operator) ERC721(\"Rubyscore_Profile\", \"Rubyscore_Profile\") {\r\n        require(admin != address(0), \"Zero address check\");\r\n        require(operator != address(0), \"Zero address check\");\r\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _grantRole(OPERATOR_ROLE, msg.sender);\r\n        _grantRole(OPERATOR_ROLE, operator);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function updateBaseURI(string memory newBaseURI) external onlyRole(OPERATOR_ROLE) {\r\n        baseURI = newBaseURI;\r\n        emit URIUpdated(newBaseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function updateBaseExtension(string memory newBaseExtension) external onlyRole(OPERATOR_ROLE) {\r\n        baseExtension = newBaseExtension;\r\n        emit ExtensionUpdated(newBaseExtension);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function updatePremiumPrice(uint256 newPremiumPrice) external onlyRole(OPERATOR_ROLE) {\r\n        premiumPrice = newPremiumPrice;\r\n        emit PremiumPriceUpdated(newPremiumPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function claimName(string calldata name) external payable returns (uint256 tokenId) {\r\n        if (msg.value == premiumPrice) {\r\n            userPremiumStatus[msg.sender] = true;\r\n            if (hasName(msg.sender)) {\r\n                tokenId = getIdByOwner(msg.sender);\r\n                if (bytes(name).length != 0) {\r\n                    _burn(tokenId);\r\n                } else {\r\n                    emit NameClaimed(msg.sender, tokenId, _userToName[msg.sender], true);\r\n                    return tokenId;\r\n                }\r\n            }\r\n        } else {\r\n            require(!hasName(msg.sender), \"Already has name\");\r\n            require(msg.value == 0, \"Wrong ETH amount\");\r\n            require(strLength(name) > 6, \"Wrong name length\");\r\n        }\r\n        tokenId = _convertNameToId(name);\r\n        _safeMint(msg.sender, tokenId);\r\n        _userToName[msg.sender] = name;\r\n        emit NameClaimed(msg.sender, tokenId, name, userPremiumStatus[msg.sender]);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IRubyscore_Profile}\r\n     */\r\n    function withdraw() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        uint256 amount = address(this).balance;\r\n        require(amount > 0, \"Zero amount to withdraw\");\r\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Withdrawed(amount);\r\n    }\r\n\r\n    //TODO: fix at _update\r\n    /**\r\n     * @notice Internal ERC721 transfer function override to prevent external transfers.\r\n     * @dev from  The address to transfer from.\r\n     * @dev to The address to transfer to.\r\n     * @dev tokenId The ID of the token being transferred.\r\n     */\r\n    // function _transfer(address /*from*/, address /*to*/, uint256 /*tokenId*/) internal override {\r\n    //     revert(\"Only For you!!!\");\r\n    // }\r\n\r\n    /**\r\n     * @notice Converts a name string to a unique identifier (ID).\r\n     * @param str The name to convert to an ID.\r\n     * @return The unique ID corresponding to the given name.\r\n     */\r\n    function _convertNameToId(string memory str) internal pure returns (uint256) {\r\n        (string memory normalizedName, bool status) = _normalizeName(str);\r\n        require(status, \"Name is invalid\");\r\n        return uint256(keccak256(abi.encodePacked(normalizedName)));\r\n    }\r\n\r\n    /**\r\n     * @notice Converts a string to a unique uint256 value.\r\n     * @param str The string to convert to a uint256.\r\n     * @return The unique uint256 value derived from the given string.\r\n     */\r\n    function _convertStringToUint256(string memory str) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(str)));\r\n    }\r\n\r\n    /**\r\n     * @notice Normalizes a given name string by converting it to lowercase and validating its length and characters.\r\n     * @param str The name to normalize.\r\n     * @return normalizedName The normalized name string in lowercase.\r\n     * @return status True if the normalization was successful, indicating a valid name; otherwise, false.\r\n     */\r\n    function _normalizeName(string memory str) internal pure returns (string memory, bool) {\r\n        uint256 stringLength = strLength(str);\r\n        require(stringLength > 2, \"Name is too short\");\r\n        require(stringLength < 21, \"Name is too long\");\r\n        bytes memory bStr = bytes(str);\r\n        bytes memory bLower = new bytes(bStr.length);\r\n        for (uint i = 0; i < bStr.length; ) {\r\n            unchecked {\r\n                uint8 bCharacter = uint8(bStr[i]);\r\n                if (bCharacter >= 65 && bCharacter <= 90) {\r\n                    bLower[i] = bytes1(bCharacter + 32); // Convert to lowercase\r\n                } else {\r\n                    if (!_checkValidCharacters(bCharacter)) return (\"\", false);\r\n                    bLower[i] = bStr[i];\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        return (string(bLower), true);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if a given character is valid within a name.\r\n     * @param bCharacter The character to check.\r\n     * @return True if the character is valid; otherwise, false.\r\n     */\r\n    function _checkValidCharacters(uint8 bCharacter) internal pure returns (bool) {\r\n        return ((bCharacter >= 95 && bCharacter <= 122) || (bCharacter >= 33 && bCharacter <= 64)) && bCharacter != 32; // lowercase letters, special characters and digits, except space\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strLength(string memory s) internal pure returns (uint256) {\r\n        uint256 len;\r\n        uint256 i = 0;\r\n        uint256 bytelength = bytes(s).length;\r\n\r\n        for (len = 0; i < bytelength; len++) {\r\n            bytes1 b = bytes(s)[i];\r\n            if (b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\r\n        address from = super._update(to, tokenId, auth);\r\n        if (from != address(0) && to != address(0)) revert(\"Only for you or occupied\");\r\n        return from;\r\n    }\r\n}\r\n"
    },
    "contracts/Rubyscore_Vote.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ncontract Rubyscore_Vote {\r\n    fallback() external payable {}\r\n\r\n    function vote() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}