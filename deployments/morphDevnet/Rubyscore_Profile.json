{
  "address": "0xDC3D8318Fbaec2de49281843f5bba22e78338146",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBaseExtension",
          "type": "string"
        }
      ],
      "name": "ExtensionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "premium",
          "type": "bool"
        }
      ],
      "name": "NameClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPremiumPrice",
          "type": "uint256"
        }
      ],
      "name": "PremiumPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "URIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "checkName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "claimName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getIdByName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getIdByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getNameById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getNameByOwner",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getOwnerByName",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPremiumPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getPremiumStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseExtension",
          "type": "string"
        }
      ],
      "name": "updateBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPremiumPrice",
          "type": "uint256"
        }
      ],
      "name": "updatePremiumPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
  "receipt": {
    "to": null,
    "from": "0x72f46FFBd3213218137015EBCcf70bFAaF619513",
    "contractAddress": "0xDC3D8318Fbaec2de49281843f5bba22e78338146",
    "transactionIndex": 0,
    "gasUsed": "2557252",
    "logsBloom": "0x
    "blockHash": "0xe78e902baa0ffec3842a0e641e6e5cc5b7d587587e1009a085ea366c38aecc70",
    "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 68635909,
        "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
        "address": "0xDC3D8318Fbaec2de49281843f5bba22e78338146",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d0d5ff3cfef8b7b2b1cac6b6c27fd0846c09361",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe78e902baa0ffec3842a0e641e6e5cc5b7d587587e1009a085ea366c38aecc70"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 68635909,
        "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
        "address": "0xDC3D8318Fbaec2de49281843f5bba22e78338146",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe78e902baa0ffec3842a0e641e6e5cc5b7d587587e1009a085ea366c38aecc70"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 68635909,
        "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
        "address": "0xDC3D8318Fbaec2de49281843f5bba22e78338146",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000381c031baa5995d0cc52386508050ac947780815",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe78e902baa0ffec3842a0e641e6e5cc5b7d587587e1009a085ea366c38aecc70"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 68635909,
        "transactionHash": "0x91ba82708166b2f13e743755cf8dfddaeb93b48bed7f20caee5950130bb34201",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x000000000000000000000000e5b39b17da77b8826f95dec6d3f285db0076ebee"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000750fcc00000000000000000000000000000000000000000000003635c9adc5de03eaf00000000000000000000000000000000000000000000000000000000000750fcc00000000000000000000000000000000000000000000003635c9adc5de03eaf00000000000000000000000000000000000000000000000000000000000750fcc",
        "logIndex": 3,
        "blockHash": "0xe78e902baa0ffec3842a0e641e6e5cc5b7d587587e1009a085ea366c38aecc70"
      }
    ],
    "blockNumber": 68635909,
    "cumulativeGasUsed": "2557252",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d0D5Ff3cFeF8B7B2b1cAC6B6C27Fd0846c09361",
    "0x381c031bAA5995D0Cc52386508050Ac947780815"
  ],
  "numDeployments": 1,
  "solcInputHash": "c569a50ea43f1b4f55b85829c9e612e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBaseExtension\",\"type\":\"string\"}],\"name\":\"ExtensionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"}],\"name\":\"NameClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremiumPrice\",\"type\":\"uint256\"}],\"name\":\"PremiumPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"URIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"checkName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"claimName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getIdByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getIdByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNameById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getNameByOwner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOwnerByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getPremiumStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseExtension\",\"type\":\"string\"}],\"name\":\"updateBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPremiumPrice\",\"type\":\"uint256\"}],\"name\":\"updatePremiumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Rubyscore_Profile is an SBT ERC721-based smart contract for claiming and managing user names. Users can claim unique names represented by ERC721 tokens. Names are normalized to lowercase and can consist of lowercase letters and selected special characters. The contract is NOT upgradeable and has role-based access control.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ExtensionUpdated(string)\":{\"params\":{\"newBaseExtension\":\"The new base extension used for token metadata files.\"}},\"NameClaimed(address,uint256,string,bool)\":{\"params\":{\"account\":\"The address of the account claiming the name.\",\"name\":\"The name that was successfully claimed.\",\"premium\":\"The premium status of name that was successfully claimed.\",\"tokenId\":\"The unique token ID associated with the claimed name.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"URIUpdated(string)\":{\"params\":{\"newBaseURI\":\"The new base URI used to construct token metadata URIs.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkName(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"claimName(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"constructor\":{\"details\":\"Constructor to initialize the contract with admin and operator addresses.\",\"params\":{\"admin\":\"Address of the contract admin.\",\"operator\":\"Address of the contract operator.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseExtension()\":{\"details\":\"See {IRubyscore_Profile}\"},\"getBaseURI()\":{\"details\":\"See {IRubyscore_Profile}\"},\"getIdByName(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getIdByOwner(address)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getNameById(uint256)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getNameByOwner(address)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getOwnerByName(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getPremiumPrice()\":{\"details\":\"See {IRubyscore_Profile}\"},\"getPremiumStatus(address)\":{\"details\":\"See {IRubyscore_Profile}\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasName(address)\":{\"details\":\"See {IRubyscore_Profile}\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IRubyscore_Profile}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IRubyscore_Profile}\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateBaseExtension(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"updateBaseURI(string)\":{\"details\":\"See {IRubyscore_Profile}\"},\"updatePremiumPrice(uint256)\":{\"details\":\"See {IRubyscore_Profile}\"},\"withdraw()\":{\"details\":\"See {IRubyscore_Profile}\"}},\"title\":\"Rubyscore_Profile\",\"version\":1},\"userdoc\":{\"events\":{\"ExtensionUpdated(string)\":{\"notice\":\"Emitted when the base extension for token metadata is updated.\"},\"NameClaimed(address,uint256,string,bool)\":{\"notice\":\"Emitted when a user successfully claims a unique name as an NFT.\"},\"URIUpdated(string)\":{\"notice\":\"Emitted when the base URI for token metadata is updated.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rubyscore_Profile.sol\":\"Rubyscore_Profile\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Rubyscore_Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Counters} from \\\"./lib/Counters.sol\\\";\\nimport {IRubyscore_Profile} from \\\"./interfaces/IRubyscore_Profile.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Rubyscore_Profile\\n * @dev Rubyscore_Profile is an SBT ERC721-based smart contract for claiming and managing user names.\\n * Users can claim unique names represented by ERC721 tokens.\\n * Names are normalized to lowercase and can consist of lowercase letters and selected special characters.\\n * The contract is NOT upgradeable and has role-based access control.\\n */\\ncontract Rubyscore_Profile is ERC721, AccessControl, IRubyscore_Profile {\\n    using Counters for Counters.Counter;\\n\\n    // Role for operators who can manage the contract\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    // Base URI for token metadata\\n    string private baseURI = \\\"https://api.rubyscore.io/nft/profile/\\\";\\n    // Base extension for token metadata\\n    string private baseExtension;\\n    // Price for premium name\\n    uint256 private premiumPrice;\\n\\n    // Mapping from user address to premium status\\n    mapping(address => bool) private userPremiumStatus;\\n    // Mapping from user address to their claimed name\\n    mapping(address => string) private _userToName;\\n    // Counter for token IDs\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getIdByName(string calldata name) external pure returns (uint256) {\\n        return _convertNameToId(name);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getBaseURI() external view returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getBaseExtension() external view returns (string memory) {\\n        return baseExtension;\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function checkName(string calldata name) external view returns (bool, uint256) {\\n        (string memory normalizedName, bool status) = _normalizeName(name);\\n        require(status, \\\"Name is invalid\\\");\\n        uint256 tokenId = _convertStringToUint256(normalizedName);\\n        require(!exists(tokenId), \\\"Name is occupied\\\");\\n        return (status, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getPremiumPrice() external view returns (uint256) {\\n        return premiumPrice;\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getPremiumStatus(address userAddress) external view returns (bool) {\\n        return userPremiumStatus[userAddress];\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getOwnerByName(string calldata name) external view returns (address) {\\n        uint256 id = _convertNameToId(name);\\n        if (!exists(id)) return address(0);\\n        return ownerOf(id);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getNameByOwner(address userAddress) external view returns (string memory) {\\n        require(balanceOf(userAddress) > 0, \\\"User does not have a name\\\");\\n        return _userToName[userAddress];\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getNameById(uint256 id) external view returns (string memory) {\\n        if (!exists(id)) return \\\"\\\";\\n        address tokenOwner = ownerOf(id);\\n        return _userToName[tokenOwner];\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function getIdByOwner(address userAddress) public view returns (uint256) {\\n        require(balanceOf(userAddress) > 0, \\\"User does not have a name\\\");\\n        (string memory name, ) = _normalizeName(_userToName[userAddress]);\\n        return _convertStringToUint256(name);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override(ERC721, IRubyscore_Profile) returns (string memory) {\\n        require(exists(tokenId), \\\"URI query for nonexistent token\\\");\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId), baseExtension));\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function hasName(address _user) public view returns (bool) {\\n        return bytes(_userToName[_user]).length > 0;\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl, IRubyscore_Profile) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the contract with admin and operator addresses.\\n     * @param admin Address of the contract admin.\\n     * @param operator Address of the contract operator.\\n     */\\n    constructor(address admin, address operator) ERC721(\\\"Rubyscore_Profile\\\", \\\"Rubyscore_Profile\\\") {\\n        require(admin != address(0), \\\"Zero address check\\\");\\n        require(operator != address(0), \\\"Zero address check\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, operator);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function updateBaseURI(string memory newBaseURI) external onlyRole(OPERATOR_ROLE) {\\n        baseURI = newBaseURI;\\n        emit URIUpdated(newBaseURI);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function updateBaseExtension(string memory newBaseExtension) external onlyRole(OPERATOR_ROLE) {\\n        baseExtension = newBaseExtension;\\n        emit ExtensionUpdated(newBaseExtension);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function updatePremiumPrice(uint256 newPremiumPrice) external onlyRole(OPERATOR_ROLE) {\\n        premiumPrice = newPremiumPrice;\\n        emit PremiumPriceUpdated(newPremiumPrice);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function claimName(string calldata name) external payable returns (uint256 tokenId) {\\n        if (msg.value == premiumPrice) {\\n            userPremiumStatus[msg.sender] = true;\\n            if (hasName(msg.sender)) {\\n                tokenId = getIdByOwner(msg.sender);\\n                if (bytes(name).length != 0) {\\n                    _burn(tokenId);\\n                } else {\\n                    emit NameClaimed(msg.sender, tokenId, _userToName[msg.sender], true);\\n                    return tokenId;\\n                }\\n            }\\n        } else {\\n            require(!hasName(msg.sender), \\\"Already has name\\\");\\n            require(msg.value == 0, \\\"Wrong ETH amount\\\");\\n            require(strLength(name) > 6, \\\"Wrong name length\\\");\\n        }\\n        tokenId = _convertNameToId(name);\\n        _safeMint(msg.sender, tokenId);\\n        _userToName[msg.sender] = name;\\n        emit NameClaimed(msg.sender, tokenId, name, userPremiumStatus[msg.sender]);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Profile}\\n     */\\n    function withdraw() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Zero amount to withdraw\\\");\\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        emit Withdrawed(amount);\\n    }\\n\\n    //TODO: fix at _update\\n    /**\\n     * @notice Internal ERC721 transfer function override to prevent external transfers.\\n     * @dev from  The address to transfer from.\\n     * @dev to The address to transfer to.\\n     * @dev tokenId The ID of the token being transferred.\\n     */\\n    // function _transfer(address /*from*/, address /*to*/, uint256 /*tokenId*/) internal override {\\n    //     revert(\\\"Only For you!!!\\\");\\n    // }\\n\\n    /**\\n     * @notice Converts a name string to a unique identifier (ID).\\n     * @param str The name to convert to an ID.\\n     * @return The unique ID corresponding to the given name.\\n     */\\n    function _convertNameToId(string memory str) internal pure returns (uint256) {\\n        (string memory normalizedName, bool status) = _normalizeName(str);\\n        require(status, \\\"Name is invalid\\\");\\n        return uint256(keccak256(abi.encodePacked(normalizedName)));\\n    }\\n\\n    /**\\n     * @notice Converts a string to a unique uint256 value.\\n     * @param str The string to convert to a uint256.\\n     * @return The unique uint256 value derived from the given string.\\n     */\\n    function _convertStringToUint256(string memory str) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(str)));\\n    }\\n\\n    /**\\n     * @notice Normalizes a given name string by converting it to lowercase and validating its length and characters.\\n     * @param str The name to normalize.\\n     * @return normalizedName The normalized name string in lowercase.\\n     * @return status True if the normalization was successful, indicating a valid name; otherwise, false.\\n     */\\n    function _normalizeName(string memory str) internal pure returns (string memory, bool) {\\n        uint256 stringLength = strLength(str);\\n        require(stringLength > 2, \\\"Name is too short\\\");\\n        require(stringLength < 21, \\\"Name is too long\\\");\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint i = 0; i < bStr.length; ) {\\n            unchecked {\\n                uint8 bCharacter = uint8(bStr[i]);\\n                if (bCharacter >= 65 && bCharacter <= 90) {\\n                    bLower[i] = bytes1(bCharacter + 32); // Convert to lowercase\\n                } else {\\n                    if (!_checkValidCharacters(bCharacter)) return (\\\"\\\", false);\\n                    bLower[i] = bStr[i];\\n                }\\n                i++;\\n            }\\n        }\\n        return (string(bLower), true);\\n    }\\n\\n    /**\\n     * @notice Checks if a given character is valid within a name.\\n     * @param bCharacter The character to check.\\n     * @return True if the character is valid; otherwise, false.\\n     */\\n    function _checkValidCharacters(uint8 bCharacter) internal pure returns (bool) {\\n        return ((bCharacter >= 95 && bCharacter <= 122) || (bCharacter >= 33 && bCharacter <= 64)) && bCharacter != 32; // lowercase letters, special characters and digits, except space\\n    }\\n\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strLength(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\\n        address from = super._update(to, tokenId, auth);\\n        if (from != address(0) && to != address(0)) revert(\\\"Only for you or occupied\\\");\\n        return from;\\n    }\\n}\\n\",\"keccak256\":\"0x24e8d06fe42a531c9de1f6eb0c0461b204d0f6e6aba7b5235b3a811749f6b76f\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyscore_Profile.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.21;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IRubyscore_Profile\\n * @dev IRubyscore_Profile is an interface for Rubyscore_Profile contract\\n */\\ninterface IRubyscore_Profile is IERC721 {\\n    /**\\n     * @notice Emitted when a user successfully claims a unique name as an NFT.\\n     * @param account The address of the account claiming the name.\\n     * @param tokenId The unique token ID associated with the claimed name.\\n     * @param name The name that was successfully claimed.\\n     * @param premium The premium status of name that was successfully claimed.\\n     */\\n    event NameClaimed(address indexed account, uint256 indexed tokenId, string name, bool indexed premium);\\n\\n    event PremiumPriceUpdated(uint256 newPremiumPrice);\\n\\n    /**\\n     * @notice Emitted when the base URI for token metadata is updated.\\n     * @param newBaseURI The new base URI used to construct token metadata URIs.\\n     */\\n    event URIUpdated(string indexed newBaseURI);\\n\\n    event Withdrawed(uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the base extension for token metadata is updated.\\n     * @param newBaseExtension The new base extension used for token metadata files.\\n     */\\n    event ExtensionUpdated(string indexed newBaseExtension);\\n\\n    /**\\n     * @notice Converts a name string to a unique identifier (ID).\\n     * @param name The name to convert to an ID.\\n     * @return The unique ID corresponding to the given name.\\n     */\\n    function getIdByName(string calldata name) external pure returns (uint256);\\n\\n    /**\\n     * @notice Gets the base URI for token metadata.\\n     * @return The current base URI.\\n     */\\n    function getBaseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the base extension for token metadata.\\n     * @return The current base extension.\\n     */\\n    function getBaseExtension() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the current premium price for a specific feature.\\n     * @dev This function allows anyone to check the current premium price without modifying it.\\n     * @return The current premium price as a uint256.\\n     */\\n    function getPremiumPrice() external view returns (uint256);\\n\\n    /**\\n     * @notice Checks the premium status for a user.\\n     * @dev This function allows anyone to check if a specific user has a premium status.\\n     * @param userAddress The address of the user to check.\\n     * @return A boolean indicating whether the user has a premium status (true) or not (false).\\n     */\\n    function getPremiumStatus(address userAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Checks the availability of a given name and converts it into a unique token ID.\\n     * @param name The name to check and convert.\\n     * @return status True if the name is valid and available; otherwise, false.\\n     * @return tokenId The unique token ID corresponding to the normalized name.\\n     */\\n    function checkName(string calldata name) external view returns (bool, uint256);\\n\\n    /**\\n     * @notice Checks if a user has claimed a name.\\n     * @param _user The user's address to check.\\n     * @return True if the user has claimed a name, otherwise false.\\n     */\\n    function hasName(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the owner of a name by its string representation.\\n     * @param name The name to look up.\\n     * @return The address of the owner of the name, or address(0) if the name does not exist.\\n     */\\n    function getOwnerByName(string calldata name) external view returns (address);\\n\\n    /**\\n     * @notice Gets the name claimed by a specific user.\\n     * @param userAddress The address of the user.\\n     * @return The name claimed by the user, if they have claimed a name.\\n     */\\n    function getNameByOwner(address userAddress) external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the unique identifier (ID) for a name claimed by a user.\\n     * @param userAddress The address of the user.\\n     * @return The unique ID for the user's claimed name.\\n     */\\n    function getIdByOwner(address userAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the name claimed by the owner of a specific ID.\\n     * @param id The unique ID for which to retrieve the claimed name.\\n     * @return The name claimed by the owner of the given ID, or an empty string if the ID does not exist.\\n     */\\n    function getNameById(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @notice Checks if a given interface is supported by this contract.\\n     * @param interfaceId The interface identifier (ERC-165) to check for support.\\n     * @return Whether the contract supports the specified interface (true or false).\\n     * @dev This function overrides the standard supportsInterface function to include AccessControl functionality.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Claims a unique name for the calling user.\\n     * @dev The name must be unique, and the caller cannot have already claimed a name.\\n     * @param name The desired name to claim.\\n     */\\n\\n    /**\\n     * @notice Allows users to claim a unique name, optionally with a premium status.\\n     * @dev Users can claim a name by providing a name string and, if desired, by paying a premium fee.\\n     * @param name The name to be claimed. It must be unique and follow specific length requirements.\\n     * @dev Requirements:\\n     *   - The provided name must be unique among all users.\\n     *   - If a premium fee is required, it must be sent along with the transaction.\\n     *   - Premium names must have a length greater than 2 characters.\\n     *   - NOT Premium names must have a length greater than 6 characters.\\n     *   - Names must have a length less than 21 characters.\\n     * @dev Effects:\\n     *   - If the user claims a premium name and pays the premium fee:\\n     *     - Their premium status is set to true.\\n     *     - If the user already had a name and field `name` is empty, the previous name is NOT replaced with the new one.\\n     *     - If the user already had a name and field `name` is NOT empty, the previous name is replaced with the new one.\\n     *   - If the user claims a non-premium name (no fee required):\\n     *     - Their premium status remains unchanged (either true or false).\\n     *     - The provided name must adhere to the length requirements.\\n     *     - If the user already had a name, transaction will reverted.\\n     * @dev Emits:\\n     *   - NameClaimed: Upon successful name claim, this event is emitted with details of the user's claim.\\n     * @return tokenId : The unique identifier (ID) associated with the user and claimed name.\\n     */\\n    function claimName(string calldata name) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Returns the token URI for a given token ID.\\n     * @param tokenId The ID of the token.\\n     * @return The URI for the token's metadata.\\n     */\\n    function tokenURI(uint256 tokenId) external returns (string memory);\\n\\n    /**\\n     * @notice Updates the base extension for token metadata.\\n     * @dev This function can only be called by operators.\\n     * @param newBaseExtension The new base extension to set.\\n     */\\n    function updateBaseExtension(string memory newBaseExtension) external;\\n\\n    /**\\n     * @notice Updates the base URI for token metadata.\\n     * @dev This function can only be called by operators.\\n     * @param newBaseURI The new base URI to set.\\n     */\\n    function updateBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Updates the premium price for a specific feature.\\n     * @param newPremiumPrice The new premium price to set.\\n     * @dev This function can only be called by addresses with the OPERATOR_ROLE.\\n     * It allows an operator to modify the premium price associated with a particular feature or service.\\n     * Emits a 'PremiumPriceUpdated' event with the new premium price.\\n     */\\n    function updatePremiumPrice(uint256 newPremiumPrice) external;\\n\\n    /**function updatePremiumPrice(uint256 newPremiumPrice) external\\n     * @notice Allows the contract owner to withdraw the Ether balance from the contract.\\n     * @dev This function can only be called by the contract owner, typically the DEFAULT_ADMIN_ROLE.\\n     * It transfers the entire Ether balance held by the contract to the owner's address.\\n     * Emits a 'Withdrawed' event with the amount of Ether withdrawn.\\n     */\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0x0663015fc366fcc939a98ed612d41750598abbab7368ddd80a686f0a4c59ae8c\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/lib/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052602560808181529062002dde60a039600790620000229082620002f2565b503480156200003057600080fd5b5060405162002e0338038062002e038339810160408190526200005391620003db565b6040805180820182526011808252705275627973636f72655f50726f66696c6560781b60208084018290528451808601909552918452908301529060006200009c8382620002f2565b506001620000ab8282620002f2565b5050506001600160a01b038216620000ff5760405162461bcd60e51b81526020600482015260126024820152715a65726f206164647265737320636865636b60701b60448201526064015b60405180910390fd5b6001600160a01b0381166200014c5760405162461bcd60e51b81526020600482015260126024820152715a65726f206164647265737320636865636b60701b6044820152606401620000f6565b620001596000836200019a565b506200017560008051602062002dbe833981519152336200019a565b506200019160008051602062002dbe833981519152826200019a565b50505062000413565b60008281526006602090815260408083206001600160a01b038516845290915281205460ff16620002435760008381526006602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620001fa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000247565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200027857607f821691505b6020821081036200029957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ed57600081815260208120601f850160051c81016020861015620002c85750805b601f850160051c820191505b81811015620002e957828155600101620002d4565b5050505b505050565b81516001600160401b038111156200030e576200030e6200024d565b62000326816200031f845462000263565b846200029f565b602080601f8311600181146200035e5760008415620003455750858301515b600019600386901b1c1916600185901b178555620002e9565b600085815260208120601f198616915b828110156200038f578886015182559484019460019091019084016200036e565b5085821015620003ae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b0381168114620003d657600080fd5b919050565b60008060408385031215620003ef57600080fd5b620003fa83620003be565b91506200040a60208401620003be565b90509250929050565b61299b80620004236000396000f3fe60806040526004361061021a5760003560e01c806354c25e4b1161012357806395d89b41116100ab578063c87b56dd1161006f578063c87b56dd14610667578063d547741f14610687578063e6be48f1146106a7578063e985e9c5146106c7578063f5b541a6146106e757600080fd5b806395d89b41146105dd578063a217fddf146105f2578063a22cb46514610607578063aeda352b14610627578063b88d4fde1461064757600080fd5b8063714c5398116100f2578063714c53981461052f578063761019711461054457806381d78a901461057d57806391d148541461059d578063931688cb146105bd57600080fd5b806354c25e4b146104bc5780636352211e146104cf578063674ddb08146104ef57806370a082311461050f57600080fd5b8063248a9ca3116101a65780633ccfd60b116101755780633ccfd60b1461041a57806342842e0e1461042f5780634695bfe61461044f57806349394b0d1461046f5780634f558e791461048457600080fd5b8063248a9ca31461038a5780632f2ff15d146103ba5780633232c10b146103da57806336568abe146103fa57600080fd5b8063095ea7b3116101ed578063095ea7b3146102c357806310b50626146102e55780631367944b146103135780631400d1e41461033357806323b872dd1461036a57600080fd5b806301ffc9a71461021f578063022503071461025457806306fdde0314610276578063081812fc1461028b575b600080fd5b34801561022b57600080fd5b5061023f61023a366004612184565b610709565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061026961071a565b60405161024b91906121f1565b34801561028257600080fd5b506102696107ac565b34801561029757600080fd5b506102ab6102a6366004612204565b6107bb565b6040516001600160a01b03909116815260200161024b565b3480156102cf57600080fd5b506102e36102de366004612239565b6107e4565b005b3480156102f157600080fd5b50610305610300366004612263565b6107f3565b60405190815260200161024b565b34801561031f57600080fd5b5061030561032e36600461227e565b61090b565b34801561033f57600080fd5b5061035361034e36600461227e565b61094c565b60408051921515835260208301919091520161024b565b34801561037657600080fd5b506102e36103853660046122f0565b610a46565b34801561039657600080fd5b506103056103a5366004612204565b60009081526006602052604090206001015490565b3480156103c657600080fd5b506102e36103d536600461232c565b610ad1565b3480156103e657600080fd5b506102e36103f53660046123e4565b610af6565b34801561040657600080fd5b506102e361041536600461232c565b610b5d565b34801561042657600080fd5b506102e3610b95565b34801561043b57600080fd5b506102e361044a3660046122f0565b610cb5565b34801561045b57600080fd5b506102ab61046a36600461227e565b610cd0565b34801561047b57600080fd5b50600954610305565b34801561049057600080fd5b5061023f61049f366004612204565b6000908152600260205260409020546001600160a01b0316151590565b6103056104ca36600461227e565b610d4c565b3480156104db57600080fd5b506102ab6104ea366004612204565b610fbd565b3480156104fb57600080fd5b5061026961050a366004612263565b610fc8565b34801561051b57600080fd5b5061030561052a366004612263565b6110c6565b34801561053b57600080fd5b5061026961110e565b34801561055057600080fd5b5061023f61055f366004612263565b6001600160a01b03166000908152600a602052604090205460ff1690565b34801561058957600080fd5b50610269610598366004612204565b61111d565b3480156105a957600080fd5b5061023f6105b836600461232c565b611208565b3480156105c957600080fd5b506102e36105d83660046123e4565b611233565b3480156105e957600080fd5b5061026961129a565b3480156105fe57600080fd5b50610305600081565b34801561061357600080fd5b506102e361062236600461242d565b6112a9565b34801561063357600080fd5b5061023f610642366004612263565b6112b4565b34801561065357600080fd5b506102e3610662366004612469565b6112e4565b34801561067357600080fd5b50610269610682366004612204565b6112fb565b34801561069357600080fd5b506102e36106a236600461232c565b611397565b3480156106b357600080fd5b506102e36106c2366004612204565b6113bc565b3480156106d357600080fd5b5061023f6106e23660046124e5565b611410565b3480156106f357600080fd5b5061030560008051602061294683398151915281565b60006107148261143e565b92915050565b6060600880546107299061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546107559061250f565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b5050505050905090565b6060600080546107299061250f565b60006107c682611463565b506000828152600460205260409020546001600160a01b0316610714565b6107ef82823361149c565b5050565b6000806107ff836110c6565b1161084d5760405162461bcd60e51b81526020600482015260196024820152785573657220646f6573206e6f7420686176652061206e616d6560381b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600b6020526040812080546108f891906108759061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546108a19061250f565b80156108ee5780601f106108c3576101008083540402835291602001916108ee565b820191906000526020600020905b8154815290600101906020018083116108d157829003601f168201915b50505050506114a9565b50905061090481611690565b9392505050565b600061090483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b60008060008061099186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a992505050565b91509150806109d45760405162461bcd60e51b815260206004820152600f60248201526e13985b59481a5cc81a5b9d985b1a59608a1b6044820152606401610844565b60006109df83611690565b6000818152600260205260409020549091506001600160a01b031615610a3a5760405162461bcd60e51b815260206004820152601060248201526f13985b59481a5cc81bd8d8dd5c1a595960821b6044820152606401610844565b90969095509350505050565b6001600160a01b038216610a7057604051633250574960e11b815260006004820152602401610844565b6000610a7d838333611743565b9050836001600160a01b0316816001600160a01b031614610acb576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610844565b50505050565b600082815260066020526040902060010154610aec816117c0565b610acb83836117cd565b600080516020612946833981519152610b0e816117c0565b6008610b1a8382612597565b5081604051610b299190612657565b604051908190038120907fea0538491ac80faeb16aa130764de632747573749c3a6e34f55c28bee697814990600090a25050565b6001600160a01b0381163314610b865760405163334bd91960e11b815260040160405180910390fd5b610b908282611861565b505050565b6000610ba0816117c0565b4780610bee5760405162461bcd60e51b815260206004820152601760248201527f5a65726f20616d6f756e7420746f2077697468647261770000000000000000006044820152606401610844565b604051600090339083908381818185875af1925050503d8060008114610c30576040519150601f19603f3d011682016040523d82523d6000602084013e610c35565b606091505b5050905080610c7d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610844565b6040518281527f11e9d9f7a772129e26cb0560945658c96b41c42ac6712d233e20c894bfcd00fd9060200160405180910390a1505050565b610b90838383604051806020016040528060008152506112e4565b600080610d1284848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b6000818152600260205260409020549091506001600160a01b0316610d3b576000915050610714565b610d4481610fbd565b949350505050565b60006009543403610df057336000818152600a60205260409020805460ff19166001179055610d7a906112b4565b15610d9957610d88336107f3565b90508115610d9e57610d99816118ce565b610efc565b336000818152600b6020526040908190209051600192849290917f489d65f3c73c43c0553ae2d3185608b8bf9e5110569a99128fd18cec88b9da8d91610de391612673565b60405180910390a4610714565b610df9336112b4565b15610e395760405162461bcd60e51b815260206004820152601060248201526f416c726561647920686173206e616d6560801b6044820152606401610844565b3415610e7a5760405162461bcd60e51b815260206004820152601060248201526f15dc9bdb99c811551208185b5bdd5b9d60821b6044820152606401610844565b6006610ebb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061190992505050565b11610efc5760405162461bcd60e51b81526020600482015260116024820152700aee4dedcce40dcc2daca40d8cadccee8d607b1b6044820152606401610844565b610f3b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b9050610f473382611a0c565b336000908152600b60205260409020610f618385836126fe565b50336000818152600a60205260409081902054905160ff90911615159183917f489d65f3c73c43c0553ae2d3185608b8bf9e5110569a99128fd18cec88b9da8d90610faf90889088906127be565b60405180910390a492915050565b600061071482611463565b60606000610fd5836110c6565b1161101e5760405162461bcd60e51b81526020600482015260196024820152785573657220646f6573206e6f7420686176652061206e616d6560381b6044820152606401610844565b6001600160a01b0382166000908152600b6020526040902080546110419061250f565b80601f016020809104026020016040519081016040528092919081815260200182805461106d9061250f565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b50505050509050919050565b60006001600160a01b0382166110f2576040516322718ad960e21b815260006004820152602401610844565b506001600160a01b031660009081526003602052604090205490565b6060600780546107299061250f565b6000818152600260205260409020546060906001600160a01b031661115057505060408051602081019091526000815290565b600061115b83610fbd565b6001600160a01b0381166000908152600b602052604090208054919250906111829061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546111ae9061250f565b80156111fb5780601f106111d0576101008083540402835291602001916111fb565b820191906000526020600020905b8154815290600101906020018083116111de57829003601f168201915b5050505050915050919050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061294683398151915261124b816117c0565b60076112578382612597565b50816040516112669190612657565b604051908190038120907fe3afa94108b5f5e82e5f6e539d161ff4b5402a85f696c67b9768ec3ae54ce36690600090a25050565b6060600180546107299061250f565b6107ef338383611a26565b6001600160a01b0381166000908152600b6020526040812080548291906112da9061250f565b9050119050919050565b6112ef848484610a46565b610acb84848484611ac5565b6000818152600260205260409020546060906001600160a01b03166113625760405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606401610844565b600761136d83611bee565b600860405160200161138193929190612860565b6040516020818303038152906040529050919050565b6000828152600660205260409020600101546113b2816117c0565b610acb8383611861565b6000805160206129468339815191526113d4816117c0565b60098290556040518281527f71d774f51a8ca4c9c8d8d4b9c3a71594870eec40b74b08d2064d86f7467aca709060200160405180910390a15050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216637965db0b60e01b1480610714575061071482611c81565b6000818152600260205260408120546001600160a01b03168061071457604051637e27328960e01b815260048101849052602401610844565b610b908383836001611cd1565b60606000806114b784611909565b9050600281116114fd5760405162461bcd60e51b815260206004820152601160248201527013985b59481a5cc81d1bdbc81cda1bdc9d607a1b6044820152606401610844565b601581106115405760405162461bcd60e51b815260206004820152601060248201526f4e616d6520697320746f6f206c6f6e6760801b6044820152606401610844565b8351849060009067ffffffffffffffff81111561155f5761155f612358565b6040519080825280601f01601f191660200182016040528015611589576020820181803683370190505b50905060005b82518110156116835760008382815181106115ac576115ac612893565b016020015160f81c9050604181108015906115cb5750605a8160ff1611155b15611605578060200160f81b8383815181106115e9576115e9612893565b60200101906001600160f81b031916908160001a90535061167a565b61160e81611dd7565b6116335760006040518060200160405280600081525090965096505050505050915091565b83828151811061164557611645612893565b602001015160f81c60f81b83838151811061166257611662612893565b60200101906001600160f81b031916908160001a9053505b5060010161158f565b5095600195509350505050565b6000816040516020016116a39190612657565b60408051601f19818403018152919052805160209091012092915050565b60008060006116cf846114a9565b91509150806117125760405162461bcd60e51b815260206004820152600f60248201526e13985b59481a5cc81a5b9d985b1a59608a1b6044820152606401610844565b816040516020016117239190612657565b60408051601f198184030181529190528051602090910120949350505050565b600080611751858585611e21565b90506001600160a01b0381161580159061177357506001600160a01b03851615155b15610d445760405162461bcd60e51b815260206004820152601860248201527f4f6e6c7920666f7220796f75206f72206f6363757069656400000000000000006044820152606401610844565b6117ca8133611f1a565b50565b60006117d98383611208565b6118595760008381526006602090815260408083206001600160a01b03861684529091529020805460ff191660011790556118113390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610714565b506000610714565b600061186d8383611208565b156118595760008381526006602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610714565b60006118dd6000836000611743565b90506001600160a01b0381166107ef57604051637e27328960e01b815260048101839052602401610844565b8051600090819081905b80821015611a0357600085838151811061192f5761192f612893565b01602001516001600160f81b0319169050600160ff1b81101561195e576119576001846128bf565b92506119f0565b600760fd1b6001600160f81b03198216101561197f576119576002846128bf565b600f60fc1b6001600160f81b0319821610156119a0576119576003846128bf565b601f60fb1b6001600160f81b0319821610156119c1576119576004846128bf565b603f60fa1b6001600160f81b0319821610156119e2576119576005846128bf565b6119ed6006846128bf565b92505b50826119fb816128d2565b935050611913565b50909392505050565b6107ef828260405180602001604052806000815250611f53565b6001600160a01b038216611a5857604051630b61174360e31b81526001600160a01b0383166004820152602401610844565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610acb57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611b079033908890879087906004016128eb565b6020604051808303816000875af1925050508015611b42575060408051601f3d908101601f19168201909252611b3f91810190612928565b60015b611bab573d808015611b70576040519150601f19603f3d011682016040523d82523d6000602084013e611b75565b606091505b508051600003611ba357604051633250574960e11b81526001600160a01b0385166004820152602401610844565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14611be757604051633250574960e11b81526001600160a01b0385166004820152602401610844565b5050505050565b60606000611bfb83611f6a565b600101905060008167ffffffffffffffff811115611c1b57611c1b612358565b6040519080825280601f01601f191660200182016040528015611c45576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c4f57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480611cb257506001600160e01b03198216635b5e139f60e01b145b8061071457506301ffc9a760e01b6001600160e01b0319831614610714565b8080611ce557506001600160a01b03821615155b15611da7576000611cf584611463565b90506001600160a01b03831615801590611d215750826001600160a01b0316816001600160a01b031614155b8015611d345750611d328184611410565b155b15611d5d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610844565b8115611da55783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000605f8260ff1610158015611df15750607a8260ff1611155b80611e0f575060218260ff1610158015611e0f575060408260ff1611155b801561071457505060ff166020141590565b6000828152600260205260408120546001600160a01b0390811690831615611e4e57611e4e818486612042565b6001600160a01b03811615611e8c57611e6b600085600080611cd1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615611ebb576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b611f248282611208565b6107ef5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610844565b611f5d83836120a6565b610b906000848484611ac5565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611fa95772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611fd5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ff357662386f26fc10000830492506010015b6305f5e100831061200b576305f5e100830492506008015b612710831061201f57612710830492506004015b60648310612031576064830492506002015b600a83106107145760010192915050565b61204d83838361210b565b610b90576001600160a01b03831661207b57604051637e27328960e01b815260048101829052602401610844565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610844565b6001600160a01b0382166120d057604051633250574960e11b815260006004820152602401610844565b60006120de83836000611743565b90506001600160a01b03811615610b90576040516339e3563760e11b815260006004820152602401610844565b60006001600160a01b03831615801590610d445750826001600160a01b0316846001600160a01b0316148061214557506121458484611410565b80610d445750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b0319811681146117ca57600080fd5b60006020828403121561219657600080fd5b81356109048161216e565b60005b838110156121bc5781810151838201526020016121a4565b50506000910152565b600081518084526121dd8160208601602086016121a1565b601f01601f19169290920160200192915050565b60208152600061090460208301846121c5565b60006020828403121561221657600080fd5b5035919050565b80356001600160a01b038116811461223457600080fd5b919050565b6000806040838503121561224c57600080fd5b6122558361221d565b946020939093013593505050565b60006020828403121561227557600080fd5b6109048261221d565b6000806020838503121561229157600080fd5b823567ffffffffffffffff808211156122a957600080fd5b818501915085601f8301126122bd57600080fd5b8135818111156122cc57600080fd5b8660208285010111156122de57600080fd5b60209290920196919550909350505050565b60008060006060848603121561230557600080fd5b61230e8461221d565b925061231c6020850161221d565b9150604084013590509250925092565b6000806040838503121561233f57600080fd5b8235915061234f6020840161221d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561238957612389612358565b604051601f8501601f19908116603f011681019082821181831017156123b1576123b1612358565b816040528093508581528686860111156123ca57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156123f657600080fd5b813567ffffffffffffffff81111561240d57600080fd5b8201601f8101841361241e57600080fd5b610d448482356020840161236e565b6000806040838503121561244057600080fd5b6124498361221d565b91506020830135801515811461245e57600080fd5b809150509250929050565b6000806000806080858703121561247f57600080fd5b6124888561221d565b93506124966020860161221d565b925060408501359150606085013567ffffffffffffffff8111156124b957600080fd5b8501601f810187136124ca57600080fd5b6124d98782356020840161236e565b91505092959194509250565b600080604083850312156124f857600080fd5b6125018361221d565b915061234f6020840161221d565b600181811c9082168061252357607f821691505b60208210810361254357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b9057600081815260208120601f850160051c810160208610156125705750805b601f850160051c820191505b8181101561258f5782815560010161257c565b505050505050565b815167ffffffffffffffff8111156125b1576125b1612358565b6125c5816125bf845461250f565b84612549565b602080601f8311600181146125fa57600084156125e25750858301515b600019600386901b1c1916600185901b17855561258f565b600085815260208120601f198616915b828110156126295788860151825594840194600190910190840161260a565b50858210156126475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516126698184602087016121a1565b9190910192915050565b60006020808352600084546126878161250f565b808487015260406001808416600081146126a857600181146126c2576126f0565b60ff1985168984015283151560051b8901830195506126f0565b896000528660002060005b858110156126e85781548b82018601529083019088016126cd565b8a0184019650505b509398975050505050505050565b67ffffffffffffffff83111561271657612716612358565b61272a83612724835461250f565b83612549565b6000601f84116001811461275e57600085156127465750838201355b600019600387901b1c1916600186901b178355611be7565b600083815260209020601f19861690835b8281101561278f578685013582556020948501946001909201910161276f565b50868210156127ac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600081546127fa8161250f565b60018281168015612812576001811461282757612856565b60ff1984168752821515830287019450612856565b8560005260208060002060005b8581101561284d5781548a820152908401908201612834565b50505082870194505b5050505092915050565b600061286c82866127ed565b845161287c8183602089016121a1565b612888818301866127ed565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610714576107146128a9565b6000600182016128e4576128e46128a9565b5060010190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061291e908301846121c5565b9695505050505050565b60006020828403121561293a57600080fd5b81516109048161216e56fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212204a5567d4f832779e4ed8020898232173f04fcdca8d2270a18d38a4aea44cbb3264736f6c6343000815003397667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92968747470733a2f2f6170692e7275627973636f72652e696f2f6e66742f70726f66696c652f",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c806354c25e4b1161012357806395d89b41116100ab578063c87b56dd1161006f578063c87b56dd14610667578063d547741f14610687578063e6be48f1146106a7578063e985e9c5146106c7578063f5b541a6146106e757600080fd5b806395d89b41146105dd578063a217fddf146105f2578063a22cb46514610607578063aeda352b14610627578063b88d4fde1461064757600080fd5b8063714c5398116100f2578063714c53981461052f578063761019711461054457806381d78a901461057d57806391d148541461059d578063931688cb146105bd57600080fd5b806354c25e4b146104bc5780636352211e146104cf578063674ddb08146104ef57806370a082311461050f57600080fd5b8063248a9ca3116101a65780633ccfd60b116101755780633ccfd60b1461041a57806342842e0e1461042f5780634695bfe61461044f57806349394b0d1461046f5780634f558e791461048457600080fd5b8063248a9ca31461038a5780632f2ff15d146103ba5780633232c10b146103da57806336568abe146103fa57600080fd5b8063095ea7b3116101ed578063095ea7b3146102c357806310b50626146102e55780631367944b146103135780631400d1e41461033357806323b872dd1461036a57600080fd5b806301ffc9a71461021f578063022503071461025457806306fdde0314610276578063081812fc1461028b575b600080fd5b34801561022b57600080fd5b5061023f61023a366004612184565b610709565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061026961071a565b60405161024b91906121f1565b34801561028257600080fd5b506102696107ac565b34801561029757600080fd5b506102ab6102a6366004612204565b6107bb565b6040516001600160a01b03909116815260200161024b565b3480156102cf57600080fd5b506102e36102de366004612239565b6107e4565b005b3480156102f157600080fd5b50610305610300366004612263565b6107f3565b60405190815260200161024b565b34801561031f57600080fd5b5061030561032e36600461227e565b61090b565b34801561033f57600080fd5b5061035361034e36600461227e565b61094c565b60408051921515835260208301919091520161024b565b34801561037657600080fd5b506102e36103853660046122f0565b610a46565b34801561039657600080fd5b506103056103a5366004612204565b60009081526006602052604090206001015490565b3480156103c657600080fd5b506102e36103d536600461232c565b610ad1565b3480156103e657600080fd5b506102e36103f53660046123e4565b610af6565b34801561040657600080fd5b506102e361041536600461232c565b610b5d565b34801561042657600080fd5b506102e3610b95565b34801561043b57600080fd5b506102e361044a3660046122f0565b610cb5565b34801561045b57600080fd5b506102ab61046a36600461227e565b610cd0565b34801561047b57600080fd5b50600954610305565b34801561049057600080fd5b5061023f61049f366004612204565b6000908152600260205260409020546001600160a01b0316151590565b6103056104ca36600461227e565b610d4c565b3480156104db57600080fd5b506102ab6104ea366004612204565b610fbd565b3480156104fb57600080fd5b5061026961050a366004612263565b610fc8565b34801561051b57600080fd5b5061030561052a366004612263565b6110c6565b34801561053b57600080fd5b5061026961110e565b34801561055057600080fd5b5061023f61055f366004612263565b6001600160a01b03166000908152600a602052604090205460ff1690565b34801561058957600080fd5b50610269610598366004612204565b61111d565b3480156105a957600080fd5b5061023f6105b836600461232c565b611208565b3480156105c957600080fd5b506102e36105d83660046123e4565b611233565b3480156105e957600080fd5b5061026961129a565b3480156105fe57600080fd5b50610305600081565b34801561061357600080fd5b506102e361062236600461242d565b6112a9565b34801561063357600080fd5b5061023f610642366004612263565b6112b4565b34801561065357600080fd5b506102e3610662366004612469565b6112e4565b34801561067357600080fd5b50610269610682366004612204565b6112fb565b34801561069357600080fd5b506102e36106a236600461232c565b611397565b3480156106b357600080fd5b506102e36106c2366004612204565b6113bc565b3480156106d357600080fd5b5061023f6106e23660046124e5565b611410565b3480156106f357600080fd5b5061030560008051602061294683398151915281565b60006107148261143e565b92915050565b6060600880546107299061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546107559061250f565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b5050505050905090565b6060600080546107299061250f565b60006107c682611463565b506000828152600460205260409020546001600160a01b0316610714565b6107ef82823361149c565b5050565b6000806107ff836110c6565b1161084d5760405162461bcd60e51b81526020600482015260196024820152785573657220646f6573206e6f7420686176652061206e616d6560381b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600b6020526040812080546108f891906108759061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546108a19061250f565b80156108ee5780601f106108c3576101008083540402835291602001916108ee565b820191906000526020600020905b8154815290600101906020018083116108d157829003601f168201915b50505050506114a9565b50905061090481611690565b9392505050565b600061090483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b60008060008061099186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a992505050565b91509150806109d45760405162461bcd60e51b815260206004820152600f60248201526e13985b59481a5cc81a5b9d985b1a59608a1b6044820152606401610844565b60006109df83611690565b6000818152600260205260409020549091506001600160a01b031615610a3a5760405162461bcd60e51b815260206004820152601060248201526f13985b59481a5cc81bd8d8dd5c1a595960821b6044820152606401610844565b90969095509350505050565b6001600160a01b038216610a7057604051633250574960e11b815260006004820152602401610844565b6000610a7d838333611743565b9050836001600160a01b0316816001600160a01b031614610acb576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610844565b50505050565b600082815260066020526040902060010154610aec816117c0565b610acb83836117cd565b600080516020612946833981519152610b0e816117c0565b6008610b1a8382612597565b5081604051610b299190612657565b604051908190038120907fea0538491ac80faeb16aa130764de632747573749c3a6e34f55c28bee697814990600090a25050565b6001600160a01b0381163314610b865760405163334bd91960e11b815260040160405180910390fd5b610b908282611861565b505050565b6000610ba0816117c0565b4780610bee5760405162461bcd60e51b815260206004820152601760248201527f5a65726f20616d6f756e7420746f2077697468647261770000000000000000006044820152606401610844565b604051600090339083908381818185875af1925050503d8060008114610c30576040519150601f19603f3d011682016040523d82523d6000602084013e610c35565b606091505b5050905080610c7d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610844565b6040518281527f11e9d9f7a772129e26cb0560945658c96b41c42ac6712d233e20c894bfcd00fd9060200160405180910390a1505050565b610b90838383604051806020016040528060008152506112e4565b600080610d1284848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b6000818152600260205260409020549091506001600160a01b0316610d3b576000915050610714565b610d4481610fbd565b949350505050565b60006009543403610df057336000818152600a60205260409020805460ff19166001179055610d7a906112b4565b15610d9957610d88336107f3565b90508115610d9e57610d99816118ce565b610efc565b336000818152600b6020526040908190209051600192849290917f489d65f3c73c43c0553ae2d3185608b8bf9e5110569a99128fd18cec88b9da8d91610de391612673565b60405180910390a4610714565b610df9336112b4565b15610e395760405162461bcd60e51b815260206004820152601060248201526f416c726561647920686173206e616d6560801b6044820152606401610844565b3415610e7a5760405162461bcd60e51b815260206004820152601060248201526f15dc9bdb99c811551208185b5bdd5b9d60821b6044820152606401610844565b6006610ebb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061190992505050565b11610efc5760405162461bcd60e51b81526020600482015260116024820152700aee4dedcce40dcc2daca40d8cadccee8d607b1b6044820152606401610844565b610f3b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116c192505050565b9050610f473382611a0c565b336000908152600b60205260409020610f618385836126fe565b50336000818152600a60205260409081902054905160ff90911615159183917f489d65f3c73c43c0553ae2d3185608b8bf9e5110569a99128fd18cec88b9da8d90610faf90889088906127be565b60405180910390a492915050565b600061071482611463565b60606000610fd5836110c6565b1161101e5760405162461bcd60e51b81526020600482015260196024820152785573657220646f6573206e6f7420686176652061206e616d6560381b6044820152606401610844565b6001600160a01b0382166000908152600b6020526040902080546110419061250f565b80601f016020809104026020016040519081016040528092919081815260200182805461106d9061250f565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b50505050509050919050565b60006001600160a01b0382166110f2576040516322718ad960e21b815260006004820152602401610844565b506001600160a01b031660009081526003602052604090205490565b6060600780546107299061250f565b6000818152600260205260409020546060906001600160a01b031661115057505060408051602081019091526000815290565b600061115b83610fbd565b6001600160a01b0381166000908152600b602052604090208054919250906111829061250f565b80601f01602080910402602001604051908101604052809291908181526020018280546111ae9061250f565b80156111fb5780601f106111d0576101008083540402835291602001916111fb565b820191906000526020600020905b8154815290600101906020018083116111de57829003601f168201915b5050505050915050919050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061294683398151915261124b816117c0565b60076112578382612597565b50816040516112669190612657565b604051908190038120907fe3afa94108b5f5e82e5f6e539d161ff4b5402a85f696c67b9768ec3ae54ce36690600090a25050565b6060600180546107299061250f565b6107ef338383611a26565b6001600160a01b0381166000908152600b6020526040812080548291906112da9061250f565b9050119050919050565b6112ef848484610a46565b610acb84848484611ac5565b6000818152600260205260409020546060906001600160a01b03166113625760405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606401610844565b600761136d83611bee565b600860405160200161138193929190612860565b6040516020818303038152906040529050919050565b6000828152600660205260409020600101546113b2816117c0565b610acb8383611861565b6000805160206129468339815191526113d4816117c0565b60098290556040518281527f71d774f51a8ca4c9c8d8d4b9c3a71594870eec40b74b08d2064d86f7467aca709060200160405180910390a15050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216637965db0b60e01b1480610714575061071482611c81565b6000818152600260205260408120546001600160a01b03168061071457604051637e27328960e01b815260048101849052602401610844565b610b908383836001611cd1565b60606000806114b784611909565b9050600281116114fd5760405162461bcd60e51b815260206004820152601160248201527013985b59481a5cc81d1bdbc81cda1bdc9d607a1b6044820152606401610844565b601581106115405760405162461bcd60e51b815260206004820152601060248201526f4e616d6520697320746f6f206c6f6e6760801b6044820152606401610844565b8351849060009067ffffffffffffffff81111561155f5761155f612358565b6040519080825280601f01601f191660200182016040528015611589576020820181803683370190505b50905060005b82518110156116835760008382815181106115ac576115ac612893565b016020015160f81c9050604181108015906115cb5750605a8160ff1611155b15611605578060200160f81b8383815181106115e9576115e9612893565b60200101906001600160f81b031916908160001a90535061167a565b61160e81611dd7565b6116335760006040518060200160405280600081525090965096505050505050915091565b83828151811061164557611645612893565b602001015160f81c60f81b83838151811061166257611662612893565b60200101906001600160f81b031916908160001a9053505b5060010161158f565b5095600195509350505050565b6000816040516020016116a39190612657565b60408051601f19818403018152919052805160209091012092915050565b60008060006116cf846114a9565b91509150806117125760405162461bcd60e51b815260206004820152600f60248201526e13985b59481a5cc81a5b9d985b1a59608a1b6044820152606401610844565b816040516020016117239190612657565b60408051601f198184030181529190528051602090910120949350505050565b600080611751858585611e21565b90506001600160a01b0381161580159061177357506001600160a01b03851615155b15610d445760405162461bcd60e51b815260206004820152601860248201527f4f6e6c7920666f7220796f75206f72206f6363757069656400000000000000006044820152606401610844565b6117ca8133611f1a565b50565b60006117d98383611208565b6118595760008381526006602090815260408083206001600160a01b03861684529091529020805460ff191660011790556118113390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610714565b506000610714565b600061186d8383611208565b156118595760008381526006602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610714565b60006118dd6000836000611743565b90506001600160a01b0381166107ef57604051637e27328960e01b815260048101839052602401610844565b8051600090819081905b80821015611a0357600085838151811061192f5761192f612893565b01602001516001600160f81b0319169050600160ff1b81101561195e576119576001846128bf565b92506119f0565b600760fd1b6001600160f81b03198216101561197f576119576002846128bf565b600f60fc1b6001600160f81b0319821610156119a0576119576003846128bf565b601f60fb1b6001600160f81b0319821610156119c1576119576004846128bf565b603f60fa1b6001600160f81b0319821610156119e2576119576005846128bf565b6119ed6006846128bf565b92505b50826119fb816128d2565b935050611913565b50909392505050565b6107ef828260405180602001604052806000815250611f53565b6001600160a01b038216611a5857604051630b61174360e31b81526001600160a01b0383166004820152602401610844565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610acb57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611b079033908890879087906004016128eb565b6020604051808303816000875af1925050508015611b42575060408051601f3d908101601f19168201909252611b3f91810190612928565b60015b611bab573d808015611b70576040519150601f19603f3d011682016040523d82523d6000602084013e611b75565b606091505b508051600003611ba357604051633250574960e11b81526001600160a01b0385166004820152602401610844565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14611be757604051633250574960e11b81526001600160a01b0385166004820152602401610844565b5050505050565b60606000611bfb83611f6a565b600101905060008167ffffffffffffffff811115611c1b57611c1b612358565b6040519080825280601f01601f191660200182016040528015611c45576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c4f57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480611cb257506001600160e01b03198216635b5e139f60e01b145b8061071457506301ffc9a760e01b6001600160e01b0319831614610714565b8080611ce557506001600160a01b03821615155b15611da7576000611cf584611463565b90506001600160a01b03831615801590611d215750826001600160a01b0316816001600160a01b031614155b8015611d345750611d328184611410565b155b15611d5d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610844565b8115611da55783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000605f8260ff1610158015611df15750607a8260ff1611155b80611e0f575060218260ff1610158015611e0f575060408260ff1611155b801561071457505060ff166020141590565b6000828152600260205260408120546001600160a01b0390811690831615611e4e57611e4e818486612042565b6001600160a01b03811615611e8c57611e6b600085600080611cd1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615611ebb576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b611f248282611208565b6107ef5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610844565b611f5d83836120a6565b610b906000848484611ac5565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611fa95772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611fd5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ff357662386f26fc10000830492506010015b6305f5e100831061200b576305f5e100830492506008015b612710831061201f57612710830492506004015b60648310612031576064830492506002015b600a83106107145760010192915050565b61204d83838361210b565b610b90576001600160a01b03831661207b57604051637e27328960e01b815260048101829052602401610844565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610844565b6001600160a01b0382166120d057604051633250574960e11b815260006004820152602401610844565b60006120de83836000611743565b90506001600160a01b03811615610b90576040516339e3563760e11b815260006004820152602401610844565b60006001600160a01b03831615801590610d445750826001600160a01b0316846001600160a01b0316148061214557506121458484611410565b80610d445750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b0319811681146117ca57600080fd5b60006020828403121561219657600080fd5b81356109048161216e565b60005b838110156121bc5781810151838201526020016121a4565b50506000910152565b600081518084526121dd8160208601602086016121a1565b601f01601f19169290920160200192915050565b60208152600061090460208301846121c5565b60006020828403121561221657600080fd5b5035919050565b80356001600160a01b038116811461223457600080fd5b919050565b6000806040838503121561224c57600080fd5b6122558361221d565b946020939093013593505050565b60006020828403121561227557600080fd5b6109048261221d565b6000806020838503121561229157600080fd5b823567ffffffffffffffff808211156122a957600080fd5b818501915085601f8301126122bd57600080fd5b8135818111156122cc57600080fd5b8660208285010111156122de57600080fd5b60209290920196919550909350505050565b60008060006060848603121561230557600080fd5b61230e8461221d565b925061231c6020850161221d565b9150604084013590509250925092565b6000806040838503121561233f57600080fd5b8235915061234f6020840161221d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561238957612389612358565b604051601f8501601f19908116603f011681019082821181831017156123b1576123b1612358565b816040528093508581528686860111156123ca57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156123f657600080fd5b813567ffffffffffffffff81111561240d57600080fd5b8201601f8101841361241e57600080fd5b610d448482356020840161236e565b6000806040838503121561244057600080fd5b6124498361221d565b91506020830135801515811461245e57600080fd5b809150509250929050565b6000806000806080858703121561247f57600080fd5b6124888561221d565b93506124966020860161221d565b925060408501359150606085013567ffffffffffffffff8111156124b957600080fd5b8501601f810187136124ca57600080fd5b6124d98782356020840161236e565b91505092959194509250565b600080604083850312156124f857600080fd5b6125018361221d565b915061234f6020840161221d565b600181811c9082168061252357607f821691505b60208210810361254357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b9057600081815260208120601f850160051c810160208610156125705750805b601f850160051c820191505b8181101561258f5782815560010161257c565b505050505050565b815167ffffffffffffffff8111156125b1576125b1612358565b6125c5816125bf845461250f565b84612549565b602080601f8311600181146125fa57600084156125e25750858301515b600019600386901b1c1916600185901b17855561258f565b600085815260208120601f198616915b828110156126295788860151825594840194600190910190840161260a565b50858210156126475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516126698184602087016121a1565b9190910192915050565b60006020808352600084546126878161250f565b808487015260406001808416600081146126a857600181146126c2576126f0565b60ff1985168984015283151560051b8901830195506126f0565b896000528660002060005b858110156126e85781548b82018601529083019088016126cd565b8a0184019650505b509398975050505050505050565b67ffffffffffffffff83111561271657612716612358565b61272a83612724835461250f565b83612549565b6000601f84116001811461275e57600085156127465750838201355b600019600387901b1c1916600186901b178355611be7565b600083815260209020601f19861690835b8281101561278f578685013582556020948501946001909201910161276f565b50868210156127ac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600081546127fa8161250f565b60018281168015612812576001811461282757612856565b60ff1984168752821515830287019450612856565b8560005260208060002060005b8581101561284d5781548a820152908401908201612834565b50505082870194505b5050505092915050565b600061286c82866127ed565b845161287c8183602089016121a1565b612888818301866127ed565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610714576107146128a9565b6000600182016128e4576128e46128a9565b5060010190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061291e908301846121c5565b9695505050505050565b60006020828403121561293a57600080fd5b81516109048161216e56fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212204a5567d4f832779e4ed8020898232173f04fcdca8d2270a18d38a4aea44cbb3264736f6c63430008150033",
  "devdoc": {
    "details": "Rubyscore_Profile is an SBT ERC721-based smart contract for claiming and managing user names. Users can claim unique names represented by ERC721 tokens. Names are normalized to lowercase and can consist of lowercase letters and selected special characters. The contract is NOT upgradeable and has role-based access control.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ExtensionUpdated(string)": {
        "params": {
          "newBaseExtension": "The new base extension used for token metadata files."
        }
      },
      "NameClaimed(address,uint256,string,bool)": {
        "params": {
          "account": "The address of the account claiming the name.",
          "name": "The name that was successfully claimed.",
          "premium": "The premium status of name that was successfully claimed.",
          "tokenId": "The unique token ID associated with the claimed name."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "URIUpdated(string)": {
        "params": {
          "newBaseURI": "The new base URI used to construct token metadata URIs."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkName(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "claimName(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "constructor": {
        "details": "Constructor to initialize the contract with admin and operator addresses.",
        "params": {
          "admin": "Address of the contract admin.",
          "operator": "Address of the contract operator."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBaseExtension()": {
        "details": "See {IRubyscore_Profile}"
      },
      "getBaseURI()": {
        "details": "See {IRubyscore_Profile}"
      },
      "getIdByName(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getIdByOwner(address)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getNameById(uint256)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getNameByOwner(address)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getOwnerByName(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getPremiumPrice()": {
        "details": "See {IRubyscore_Profile}"
      },
      "getPremiumStatus(address)": {
        "details": "See {IRubyscore_Profile}"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasName(address)": {
        "details": "See {IRubyscore_Profile}"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IRubyscore_Profile}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IRubyscore_Profile}"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateBaseExtension(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "updateBaseURI(string)": {
        "details": "See {IRubyscore_Profile}"
      },
      "updatePremiumPrice(uint256)": {
        "details": "See {IRubyscore_Profile}"
      },
      "withdraw()": {
        "details": "See {IRubyscore_Profile}"
      }
    },
    "title": "Rubyscore_Profile",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExtensionUpdated(string)": {
        "notice": "Emitted when the base extension for token metadata is updated."
      },
      "NameClaimed(address,uint256,string,bool)": {
        "notice": "Emitted when a user successfully claims a unique name as an NFT."
      },
      "URIUpdated(string)": {
        "notice": "Emitted when the base URI for token metadata is updated."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2213,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2215,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2219,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2223,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2227,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2233,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 26,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 6872,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "baseURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6874,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "baseExtension",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 6876,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "premiumPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6880,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "userPremiumStatus",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6884,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_userToName",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 6887,
        "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)10900_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)10900_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 10899,
            "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/Rubyscore_Profile.sol:Rubyscore_Profile",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}