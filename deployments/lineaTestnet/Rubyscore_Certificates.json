{
  "address": "0x53643DfdA47762821dfe1a19DC09E69e5c3b6dED",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "BatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newTokenURI",
          "type": "string"
        }
      ],
      "name": "TokenURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "safeBatchMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "newTokenURIs",
          "type": "string[]"
        }
      ],
      "name": "setBatchTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newTokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72885b9a070ec3a7e38c8a2a5c9a576dc939654700807000944382c24b7d940d",
  "receipt": {
    "to": null,
    "from": "0x4803003e06Fe7Bc150cC8CB21D12750A1A1bA135",
    "contractAddress": "0x53643DfdA47762821dfe1a19DC09E69e5c3b6dED",
    "transactionIndex": 1,
    "gasUsed": "2582200",
    "logsBloom": "0x
    "blockHash": "0x42982ad557ea4aae5e73f6f24fa9bed44c2caf3d5551b28337d4a9cbb09db529",
    "transactionHash": "0x72885b9a070ec3a7e38c8a2a5c9a576dc939654700807000944382c24b7d940d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2830528,
        "transactionHash": "0x72885b9a070ec3a7e38c8a2a5c9a576dc939654700807000944382c24b7d940d",
        "address": "0x53643DfdA47762821dfe1a19DC09E69e5c3b6dED",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x42982ad557ea4aae5e73f6f24fa9bed44c2caf3d5551b28337d4a9cbb09db529"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 2830528,
        "transactionHash": "0x72885b9a070ec3a7e38c8a2a5c9a576dc939654700807000944382c24b7d940d",
        "address": "0x53643DfdA47762821dfe1a19DC09E69e5c3b6dED",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x42982ad557ea4aae5e73f6f24fa9bed44c2caf3d5551b28337d4a9cbb09db529"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 2830528,
        "transactionHash": "0x72885b9a070ec3a7e38c8a2a5c9a576dc939654700807000944382c24b7d940d",
        "address": "0x53643DfdA47762821dfe1a19DC09E69e5c3b6dED",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135",
          "0x0000000000000000000000004803003e06fe7bc150cc8cb21d12750a1a1ba135"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x42982ad557ea4aae5e73f6f24fa9bed44c2caf3d5551b28337d4a9cbb09db529"
      }
    ],
    "blockNumber": 2830528,
    "cumulativeGasUsed": "2651594",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4803003e06Fe7Bc150cC8CB21D12750A1A1bA135",
    "0x4803003e06Fe7Bc150cC8CB21D12750A1A1bA135",
    "0x4803003e06Fe7Bc150cC8CB21D12750A1A1bA135",
    "ipfs://",
    "Rubyscore_Cetificate",
    "Rubyscore_Cetificate"
  ],
  "numDeployments": 2,
  "solcInputHash": "685370fd25903e4e6d517c8d48c5b5bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"BatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"TokenURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"newTokenURIs\",\"type\":\"string[]\"}],\"name\":\"setBatchTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An ERC1155 token contract for minting and managing certificates with URI support.Rubyscore_Certificates can be minted by users with the MINTER_ROLE after proper authorization.Rubyscore_Certificates can have their URIs set by operators with the MINTER_ROLE.Rubyscore_Certificates can be safely transferred with restrictions on certain tokens.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"BaseURISet(string)\":{\"details\":\"This event is triggered when the contract operator updates the base URI for retrieving metadata associated with tokens. The 'newBaseURI' parameter represents the updated base URI.\",\"params\":{\"newBaseURI\":\"The new base URI that will be used to construct token metadata URIs.\"}},\"BatchMinted(address,uint256[])\":{\"details\":\"This event is emitted when new NFTs are created and assigned to a user.It includes the user's address and the IDs of the minted NFTs for transparency.\",\"params\":{\"nftIds\":\"NFT IDs that were minted.\",\"userAddress\":\"The address of the user receiving the NFTs.\"}},\"Minted(address,uint256)\":{\"details\":\"This event is emitted when new NFTs are created and assigned to a user.It includes the user's address, and the ID of the minted NFT for transparency.\",\"params\":{\"nftId\":\"NFT IDs that were minted.\",\"userAddress\":\"The address of the user receiving the NFTs.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TokenURISet(uint256,string)\":{\"details\":\"This event is emitted when the URI for a token is modified, providing transparency when metadata URIs are changed for specific tokens.\",\"params\":{\"newTokenURI\":\"The new URI assigned to the token.\",\"tokenId\":\"The ID of the token for which the URI is updated.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"Initializes the contract with roles and settings.It sets the base URI for token metadata to the provided `baseURI`.It grants the DEFAULT_ADMIN_ROLE, OPERATOR_ROLE, and MINTER_ROLE to the specified addresses.It also initializes the contract with EIP712 support and ERC1155 functionality.\",\"params\":{\"admin\":\"The address of the admin role, which has overall control.\",\"baseURI\":\"The base URI for token metadata.\",\"minter\":\"The address of the minter role, authorized to mint achievements and responsible for setting token URIs.\",\"operator\":\"The address of the operator role, responsible for unlock tokens and set base URI.\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchMint(address,uint256[])\":{\"details\":\"See {IRubyscore_Certificates}\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeMint(address,uint256)\":{\"details\":\"See {IRubyscore_Certificates}\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"See {IRubyscore_Certificates}\"},\"setBatchTokenURI(uint256[],string[])\":{\"details\":\"See {IRubyscore_Certificates}\"},\"setTokenURI(uint256,string)\":{\"details\":\"See {IRubyscore_Certificates}\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IRubyscore_Certificates}\"},\"tokenURI(uint256)\":{\"details\":\"See {IRubyscore_Certificates}\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IRubyscore_Certificates}\"}},\"stateVariables\":{\"name\":{\"return\":\"Token name.\",\"returns\":{\"_0\":\"Token name.\"}},\"symbol\":{\"return\":\"Token symbol.\",\"returns\":{\"_0\":\"Token symbol.\"}}},\"title\":\"Rubyscore_Certificates\",\"version\":1},\"userdoc\":{\"events\":{\"BaseURISet(string)\":{\"notice\":\"Emitted when the base URI for token metadata is updated.\"},\"BatchMinted(address,uint256[])\":{\"notice\":\"Emitted when NFTs are minted for a user.\"},\"Minted(address,uint256)\":{\"notice\":\"Emitted when NFTs are minted for a user.\"},\"TokenURISet(uint256,string)\":{\"notice\":\"Emitted when the URI for a specific token is updated.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the Rubyscore_Achievement contract.\"},\"name()\":{\"notice\":\"Get token name.\"},\"symbol()\":{\"notice\":\"Get token symbol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/certificates/Rubyscore_Certificates.sol\":\"Rubyscore_Certificates\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/certificates/Rubyscore_Certificates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {IRubyscore_Certificates} from \\\"./interfaces/IRubyscore_Certificates.sol\\\";\\nimport {ERC1155URIStorage} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport {AccessControl, Strings} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ERC1155, ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\n/**\\n * @title Rubyscore_Certificates\\n * @dev An ERC1155 token contract for minting and managing certificates with URI support.\\n * @dev Rubyscore_Certificates can be minted by users with the MINTER_ROLE after proper authorization.\\n * @dev Rubyscore_Certificates can have their URIs set by operators with the MINTER_ROLE.\\n * @dev Rubyscore_Certificates can be safely transferred with restrictions on certain tokens.\\n */\\n\\ncontract Rubyscore_Certificates is ERC1155, AccessControl, ERC1155Supply, ERC1155URIStorage, IRubyscore_Certificates {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    string public name;\\n    string public symbol;\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl, IRubyscore_Certificates) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function uri(\\n        uint256 tokenId\\n    ) public view override(ERC1155, ERC1155URIStorage, IRubyscore_Certificates) returns (string memory) {\\n        return super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        return uri(tokenId);\\n    }\\n\\n    /**\\n     * @notice Constructor for the Rubyscore_Achievement contract.\\n     * @dev Initializes the contract with roles and settings.\\n     * @param admin The address of the admin role, which has overall control.\\n     * @param operator The address of the operator role, responsible for unlock tokens and set base URI.\\n     * @param minter The address of the minter role, authorized to mint achievements and responsible for setting token URIs.\\n     * @param baseURI The base URI for token metadata.\\n     * @dev It sets the base URI for token metadata to the provided `baseURI`.\\n     * @dev It grants the DEFAULT_ADMIN_ROLE, OPERATOR_ROLE, and MINTER_ROLE to the specified addresses.\\n     * @dev It also initializes the contract with EIP712 support and ERC1155 functionality.\\n     */\\n    constructor(\\n        address admin,\\n        address operator,\\n        address minter,\\n        string memory baseURI,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC1155(\\\"ipfs://\\\") {\\n        require(admin != address(0), \\\"Zero address check\\\");\\n        require(operator != address(0), \\\"Zero address check\\\");\\n        require(minter != address(0), \\\"Zero address check\\\");\\n        name = _name;\\n        symbol = _symbol;\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, operator);\\n        _grantRole(MINTER_ROLE, minter);\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) public onlyRole(OPERATOR_ROLE) {\\n        super._setURI(tokenId, newTokenURI);\\n        emit TokenURISet(tokenId, newTokenURI);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function setBatchTokenURI(\\n        uint256[] calldata tokenIds,\\n        string[] calldata newTokenURIs\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        require(tokenIds.length == newTokenURIs.length, \\\"Invalid params\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            setTokenURI(tokenIds[i], newTokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function setBaseURI(string memory newBaseURI) external onlyRole(OPERATOR_ROLE) {\\n        super._setBaseURI(newBaseURI);\\n        emit BaseURISet(newBaseURI);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function safeMint(address to, uint256 nftId) external payable onlyRole(MINTER_ROLE) {\\n        _mint(to, nftId, \\\"\\\");\\n        emit Minted(to, nftId);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function safeBatchMint(address to, uint256[] memory nftIds) external payable onlyRole(MINTER_ROLE) {\\n        _mintBatch(to, nftIds, \\\"\\\");\\n        emit BatchMinted(to, nftIds);\\n    }\\n\\n    /**\\n     * @dev See {IRubyscore_Certificates}\\n     */\\n    function _mint(address to, uint256 id, bytes memory data) internal {\\n        require(balanceOf(to, id) == 0, \\\"You already have this certificate\\\");\\n        super._mint(to, id, 1, data);\\n    }\\n\\n    /**\\n     * @notice Internal function to safely mint multiple NFTs in a batch for a specified recipient.\\n     * @param to The address of the recipient to mint the NFTs for.\\n     * @param ids An array of NFT IDs to mint.\\n     * @param data Additional data to include in the minting transaction.\\n     * @dev This function checks if the recipient already owns any of the specified NFTs to prevent duplicates.\\n     * @dev It is intended for batch minting operations where multiple NFTs can be minted at once.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, bytes memory data) internal {\\n        uint256[] memory amounts = new uint256[](ids.length);\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            require(balanceOf(to, ids[i]) == 0, \\\"You already have this certificate\\\");\\n            amounts[i] = 1;\\n        }\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice Internal function that is called before the transfer of tokens.\\n     * @param operator The address that initiates or approves the transfer.\\n     * @param from The address from which the tokens are being transferred.\\n     * @param to The address to which the tokens are being transferred.\\n     * @param ids An array of token IDs to be transferred.\\n     * @param amounts An array of token amounts corresponding to the IDs to be transferred.\\n     * @param data Additional data to include in the transfer.\\n     * @dev This function enforces transfer restrictions based on the 'transferUnlock' status of individual tokens.\\n     * @dev If a token has its transfer locked and the 'from' address is not zero (indicating a user-to-contract transfer),\\n     * it will revert to prevent unauthorized transfers.\\n     * @dev It then delegates the transfer logic to the parent contracts 'ERC1155' and 'ERC1155Supply'.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (from != address(0)) revert(\\\"This token only for you\\\");\\n        }\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xd9cc3e91d2d5adedb21aa42d5d4632eec4a0eb58a5f3068194cfc33b3d7dc117\",\"license\":\"MIT\"},\"contracts/certificates/interfaces/IRubyscore_Certificates.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @title IRubyscore_Certificates\\n * @dev IRubyscore_Certificates is an interface for Rubyscore_Certificates contract\\n */\\ninterface IRubyscore_Certificates is IERC1155 {\\n    /**\\n     * @notice Emitted when the base URI for token metadata is updated.\\n     * @param newBaseURI The new base URI that will be used to construct token metadata URIs.\\n     * @dev This event is triggered when the contract operator updates the base URI\\n     * for retrieving metadata associated with tokens. The 'newBaseURI' parameter represents\\n     * the updated base URI.\\n     */\\n    event BaseURISet(string indexed newBaseURI);\\n\\n    /**\\n     * @notice Emitted when NFTs are minted for a user.\\n     * @param userAddress The address of the user receiving the NFTs.\\n     * @param nftId NFT IDs that were minted.\\n     * @dev This event is emitted when new NFTs are created and assigned to a user.\\n     * @dev It includes the user's address, and the ID of the minted NFT for transparency.\\n     */\\n    event Minted(address indexed userAddress, uint256 nftId);\\n\\n    /**\\n     * @notice Emitted when NFTs are minted for a user.\\n     * @param userAddress The address of the user receiving the NFTs.\\n     * @param nftIds NFT IDs that were minted.\\n     * @dev This event is emitted when new NFTs are created and assigned to a user.\\n     * @dev It includes the user's address and the IDs of the minted NFTs for transparency.\\n     */\\n    event BatchMinted(address indexed userAddress, uint256[] nftIds);\\n\\n    /**\\n     * @notice Emitted when the URI for a specific token is updated.\\n     * @param tokenId The ID of the token for which the URI is updated.\\n     * @param newTokenURI The new URI assigned to the token.\\n     * @dev This event is emitted when the URI for a token is modified, providing transparency\\n     * when metadata URIs are changed for specific tokens.\\n     */\\n    event TokenURISet(uint256 indexed tokenId, string indexed newTokenURI);\\n\\n    /**\\n     * @notice Get token name.\\n     * @return Token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Get token symbol.\\n     * @return Token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Get the URI of a token.\\n     * @param tokenId The ID of the token.\\n     * @return The URI of the token.\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @notice Get the token URI for a given tokenId.\\n     * @param tokenId The ID of the token.\\n     * @return The URI of the token.\\n     * @dev Diblicate for uri() method\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @notice Set the URI for a token.\\n     * @param tokenId The ID of the token.\\n     * @param newTokenURI The new URI to set for the token.\\n     * @dev Requires the MINTER_ROLE.\\n     */\\n    function setTokenURI(uint256 tokenId, string memory newTokenURI) external;\\n\\n    /**\\n     * @notice Set the URIs for multiple tokens in a batch.\\n     * @param tokenIds An array of token IDs to set URIs for.\\n     * @param newTokenURIs An array of new URIs to set for the tokens.\\n     * @dev Requires the MINTER_ROLE.\\n     * @dev Requires that the tokenIds and newTokenURIs arrays have the same length.\\n     */\\n    function setBatchTokenURI(uint256[] calldata tokenIds, string[] calldata newTokenURIs) external;\\n\\n    /**\\n     * @notice Set the base URI for all tokens.\\n     * @param newBaseURI The new base URI to set.\\n     * @dev Requires the OPERATOR_ROLE.\\n     */\\n    function setBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Safely mints NFT for a user.\\n     * @param to The NFT recipient.\\n     * @param id The NFT id.\\n     */\\n    function safeMint(address to, uint256 id) external payable;\\n\\n    /**\\n     * @notice Check if a given interface is supported by this contract.\\n     * @param interfaceId The interface identifier to check for support.\\n     * @return Whether the contract supports the specified interface.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x93409077c63de9cac60e8636e1c86e7cacb9142917b60a676b88d9b875664bfb\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a0604052600060809081526005906200001a90826200036d565b503480156200002857600080fd5b5060405162003042380380620030428339810160408190526200004b9162000505565b604080518082019091526007815266697066733a2f2f60c81b6020820152620000748162000204565b506001600160a01b038616620000c65760405162461bcd60e51b81526020600482015260126024820152715a65726f206164647265737320636865636b60701b60448201526064015b60405180910390fd5b6001600160a01b038516620001135760405162461bcd60e51b81526020600482015260126024820152715a65726f206164647265737320636865636b60701b6044820152606401620000bd565b6001600160a01b038416620001605760405162461bcd60e51b81526020600482015260126024820152715a65726f206164647265737320636865636b60701b6044820152606401620000bd565b60076200016e83826200036d565b5060086200017d82826200036d565b506200018b60008762000216565b620001a6600080516020620030228339815191523362000216565b620001c1600080516020620030228339815191528662000216565b620001ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68562000216565b620001f883620002ba565b505050505050620005ce565b60026200021282826200036d565b5050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16620002125760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002763390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60056200021282826200036d565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002f357607f821691505b6020821081036200031457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036857600081815260208120601f850160051c81016020861015620003435750805b601f850160051c820191505b8181101562000364578281556001016200034f565b5050505b505050565b81516001600160401b03811115620003895762000389620002c8565b620003a1816200039a8454620002de565b846200031a565b602080601f831160018114620003d95760008415620003c05750858301515b600019600386901b1c1916600185901b17855562000364565b600085815260208120601f198616915b828110156200040a57888601518255948401946001909101908401620003e9565b5085821015620004295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b03811681146200045157600080fd5b919050565b600082601f8301126200046857600080fd5b81516001600160401b0380821115620004855762000485620002c8565b604051601f8301601f19908116603f01168101908282118183101715620004b057620004b0620002c8565b81604052838152602092508683858801011115620004cd57600080fd5b600091505b83821015620004f15785820183015181830184015290820190620004d2565b600093810190920192909252949350505050565b60008060008060008060c087890312156200051f57600080fd5b6200052a8762000439565b95506200053a6020880162000439565b94506200054a6040880162000439565b60608801519094506001600160401b03808211156200056857600080fd5b620005768a838b0162000456565b945060808901519150808211156200058d57600080fd5b6200059b8a838b0162000456565b935060a0890151915080821115620005b257600080fd5b50620005c189828a0162000456565b9150509295509295509295565b612a4480620005de6000396000f3fe6080604052600436106101805760003560e01c806395d89b41116100d1578063c87b56dd1161008a578063e243bc9411610064578063e243bc9414610496578063e985e9c5146104a9578063f242432a146104f2578063f5b541a61461051257600080fd5b8063c87b56dd14610422578063d539139314610442578063d547741f1461047657600080fd5b806395d89b4114610378578063a14481941461038d578063a217fddf146103a0578063a22cb465146103b5578063ba772d8b146103d5578063bd85b039146103f557600080fd5b80632eb2c2d61161013e5780634e1273f4116101185780634e1273f4146102dc5780634f558e791461030957806355f804b31461033857806391d148541461035857600080fd5b80632eb2c2d61461027c5780632f2ff15d1461029c57806336568abe146102bc57600080fd5b8062fdd58e1461018557806301ffc9a7146101b857806306fdde03146101e85780630e89341c1461020a578063162094c41461022a578063248a9ca31461024c575b600080fd5b34801561019157600080fd5b506101a56101a0366004611ce0565b610534565b6040519081526020015b60405180910390f35b3480156101c457600080fd5b506101d86101d3366004611d20565b6105cd565b60405190151581526020016101af565b3480156101f457600080fd5b506101fd6105d8565b6040516101af9190611d8d565b34801561021657600080fd5b506101fd610225366004611da0565b610666565b34801561023657600080fd5b5061024a610245366004611e6e565b610671565b005b34801561025857600080fd5b506101a5610267366004611da0565b60009081526003602052604090206001015490565b34801561028857600080fd5b5061024a610297366004611f48565b6106d8565b3480156102a857600080fd5b5061024a6102b7366004611ff1565b610724565b3480156102c857600080fd5b5061024a6102d7366004611ff1565b61074e565b3480156102e857600080fd5b506102fc6102f736600461201d565b6107cc565b6040516101af9190612118565b34801561031557600080fd5b506101d8610324366004611da0565b600090815260046020526040902054151590565b34801561034457600080fd5b5061024a61035336600461212b565b6108f5565b34801561036457600080fd5b506101d8610373366004611ff1565b610958565b34801561038457600080fd5b506101fd610983565b61024a61039b366004611ce0565b610990565b3480156103ac57600080fd5b506101a5600081565b3480156103c157600080fd5b5061024a6103d0366004612167565b610a1c565b3480156103e157600080fd5b5061024a6103f03660046121ee565b610a27565b34801561040157600080fd5b506101a5610410366004611da0565b60009081526004602052604090205490565b34801561042e57600080fd5b506101fd61043d366004611da0565b610b1e565b34801561044e57600080fd5b506101a57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561048257600080fd5b5061024a610491366004611ff1565b610b29565b61024a6104a4366004612259565b610b4e565b3480156104b557600080fd5b506101d86104c436600461229c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156104fe57600080fd5b5061024a61050d3660046122c6565b610bcb565b34801561051e57600080fd5b506101a56000805160206129ef83398151915281565b60006001600160a01b0383166105a45760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006105c782610c10565b600780546105e59061232a565b80601f01602080910402602001604051908101604052809291908181526020018280546106119061232a565b801561065e5780601f106106335761010080835404028352916020019161065e565b820191906000526020600020905b81548152906001019060200180831161064157829003601f168201915b505050505081565b60606105c782610c35565b6000805160206129ef83398151915261068981610d15565b6106938383610d22565b816040516106a19190612364565b6040519081900381209084907fda84ca2183491f179a603e877b2cb058e42195041c2b9c53d746427e519a34df90600090a3505050565b6001600160a01b0385163314806106f457506106f485336104c4565b6107105760405162461bcd60e51b815260040161059b90612380565b61071d8585858585610d7f565b5050505050565b60008281526003602052604090206001015461073f81610d15565b6107498383610f21565b505050565b6001600160a01b03811633146107be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161059b565b6107c88282610fa7565b5050565b606081518351146108315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161059b565b600083516001600160401b0381111561084c5761084c611db9565b604051908082528060200260200182016040528015610875578160200160208202803683370190505b50905060005b84518110156108ed576108c0858281518110610899576108996123ce565b60200260200101518583815181106108b3576108b36123ce565b6020026020010151610534565b8282815181106108d2576108d26123ce565b60209081029190910101526108e6816123fa565b905061087b565b509392505050565b6000805160206129ef83398151915261090d81610d15565b6109168261100e565b816040516109249190612364565b604051908190038120907ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f690600090a25050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600880546105e59061232a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66109ba81610d15565b6109d483836040518060200160405280600081525061101a565b826001600160a01b03167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe83604051610a0f91815260200190565b60405180910390a2505050565b6107c833838361104e565b6000805160206129ef833981519152610a3f81610d15565b838214610a7f5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b604482015260640161059b565b60005b84811015610b1657610b04868683818110610a9f57610a9f6123ce565b90506020020135858584818110610ab857610ab86123ce565b9050602002810190610aca9190612413565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061067192505050565b80610b0e816123fa565b915050610a82565b505050505050565b60606105c782610666565b600082815260036020526040902060010154610b4481610d15565b6107498383610fa7565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610b7881610d15565b610b9283836040518060200160405280600081525061112e565b826001600160a01b03167f0fccc44f8f4572066001d167eac735aa3f72308ef306fd3af1b0bb0b6a7ba90f83604051610a0f9190612118565b6001600160a01b038516331480610be75750610be785336104c4565b610c035760405162461bcd60e51b815260040161059b90612380565b61071d8585858585611201565b60006001600160e01b03198216637965db0b60e01b14806105c757506105c782611339565b600081815260066020526040812080546060929190610c539061232a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7f9061232a565b8015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b505050505090506000815111610cea57610ce583611389565b610d0e565b600581604051602001610cfe929190612459565b6040516020818303038152906040525b9392505050565b610d1f813361141d565b50565b6000828152600660205260409020610d3a8282612526565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b610d6684610666565b604051610d739190611d8d565b60405180910390a25050565b8151835114610da05760405162461bcd60e51b815260040161059b906125e5565b6001600160a01b038416610dc65760405162461bcd60e51b815260040161059b9061262d565b33610dd5818787878787611476565b60005b8451811015610ebb576000858281518110610df557610df56123ce565b602002602001015190506000858381518110610e1357610e136123ce565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e635760405162461bcd60e51b815260040161059b90612672565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610ea09084906126bc565b9250508190555050505080610eb4906123fa565b9050610dd8565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f0b9291906126cf565b60405180910390a4610b168187878787876114fa565b610f2b8282610958565b6107c85760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610fb18282610958565b156107c85760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60056107c88282612526565b6110248383610534565b156110415760405162461bcd60e51b815260040161059b906126fd565b610749838360018461165e565b816001600160a01b0316836001600160a01b0316036110c15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161059b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600082516001600160401b0381111561114957611149611db9565b604051908082528060200260200182016040528015611172578160200160208202803683370190505b50905060005b83518160ff1610156111ee5761119d85858360ff16815181106108b3576108b36123ce565b156111ba5760405162461bcd60e51b815260040161059b906126fd565b6001828260ff16815181106111d1576111d16123ce565b6020908102919091010152806111e68161273e565b915050611178565b506111fb8484838561173e565b50505050565b6001600160a01b0384166112275760405162461bcd60e51b815260040161059b9061262d565b33600061123385611898565b9050600061124085611898565b9050611250838989858589611476565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156112915760405162461bcd60e51b815260040161059b90612672565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906112ce9084906126bc565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461132e848a8a8a8a8a6118e3565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061136a57506001600160e01b031982166303a24d0760e21b145b806105c757506301ffc9a760e01b6001600160e01b03198316146105c7565b6060600280546113989061232a565b80601f01602080910402602001604051908101604052809291908181526020018280546113c49061232a565b80156114115780601f106113e657610100808354040283529160200191611411565b820191906000526020600020905b8154815290600101906020018083116113f457829003601f168201915b50505050509050919050565b6114278282610958565b6107c8576114348161199e565b61143f8360206119b0565b60405160200161145092919061275d565b60408051601f198184030181529082905262461bcd60e51b825261059b91600401611d8d565b60005b83518110156114eb576001600160a01b038616156114d95760405162461bcd60e51b815260206004820152601760248201527f5468697320746f6b656e206f6e6c7920666f7220796f75000000000000000000604482015260640161059b565b806114e3816123fa565b915050611479565b50610b16868686868686611b4b565b6001600160a01b0384163b15610b165760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061153e90899089908890889088906004016127d2565b6020604051808303816000875af1925050508015611579575060408051601f3d908101601f1916820190925261157691810190612830565b60015b6116255761158561284d565b806308c379a0036115be5750611599612869565b806115a457506115c0565b8060405162461bcd60e51b815260040161059b9190611d8d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161059b565b6001600160e01b0319811663bc197c8160e01b146116555760405162461bcd60e51b815260040161059b906128f2565b50505050505050565b6001600160a01b0384166116845760405162461bcd60e51b815260040161059b9061293a565b33600061169085611898565b9050600061169d85611898565b90506116ae83600089858589611476565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906116de9084906126bc565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611655836000898989896118e3565b6001600160a01b0384166117645760405162461bcd60e51b815260040161059b9061293a565b81518351146117855760405162461bcd60e51b815260040161059b906125e5565b3361179581600087878787611476565b60005b8451811015611830578381815181106117b3576117b36123ce565b60200260200101516000808784815181106117d0576117d06123ce565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461181891906126bc565b90915550819050611828816123fa565b915050611798565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118819291906126cf565b60405180910390a461071d816000878787876114fa565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118d2576118d26123ce565b602090810291909101015292915050565b6001600160a01b0384163b15610b165760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611927908990899088908890889060040161297b565b6020604051808303816000875af1925050508015611962575060408051601f3d908101601f1916820190925261195f91810190612830565b60015b61196e5761158561284d565b6001600160e01b0319811663f23a6e6160e01b146116555760405162461bcd60e51b815260040161059b906128f2565b60606105c76001600160a01b03831660145b606060006119bf8360026129c0565b6119ca9060026126bc565b6001600160401b038111156119e1576119e1611db9565b6040519080825280601f01601f191660200182016040528015611a0b576020820181803683370190505b509050600360fc1b81600081518110611a2657611a266123ce565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5557611a556123ce565b60200101906001600160f81b031916908160001a9053506000611a798460026129c0565b611a849060016126bc565b90505b6001811115611afc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab857611ab86123ce565b1a60f81b828281518110611ace57611ace6123ce565b60200101906001600160f81b031916908160001a90535060049490941c93611af5816129d7565b9050611a87565b508315610d0e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161059b565b6001600160a01b038516611bd25760005b8351811015611bd057828181518110611b7757611b776123ce565b602002602001015160046000868481518110611b9557611b956123ce565b602002602001015181526020019081526020016000206000828254611bba91906126bc565b90915550611bc99050816123fa565b9050611b5c565b505b6001600160a01b038416610b165760005b8351811015611655576000848281518110611c0057611c006123ce565b602002602001015190506000848381518110611c1e57611c1e6123ce565b6020026020010151905060006004600084815260200190815260200160002054905081811015611ca15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b606482015260840161059b565b60009283526004602052604090922091039055611cbd816123fa565b9050611be3565b80356001600160a01b0381168114611cdb57600080fd5b919050565b60008060408385031215611cf357600080fd5b611cfc83611cc4565b946020939093013593505050565b6001600160e01b031981168114610d1f57600080fd5b600060208284031215611d3257600080fd5b8135610d0e81611d0a565b60005b83811015611d58578181015183820152602001611d40565b50506000910152565b60008151808452611d79816020860160208601611d3d565b601f01601f19169290920160200192915050565b602081526000610d0e6020830184611d61565b600060208284031215611db257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611df457611df4611db9565b6040525050565b600082601f830112611e0c57600080fd5b81356001600160401b03811115611e2557611e25611db9565b604051611e3c601f8301601f191660200182611dcf565b818152846020838601011115611e5157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611e8157600080fd5b8235915060208301356001600160401b03811115611e9e57600080fd5b611eaa85828601611dfb565b9150509250929050565b60006001600160401b03821115611ecd57611ecd611db9565b5060051b60200190565b600082601f830112611ee857600080fd5b81356020611ef582611eb4565b604051611f028282611dcf565b83815260059390931b8501820192828101915086841115611f2257600080fd5b8286015b84811015611f3d5780358352918301918301611f26565b509695505050505050565b600080600080600060a08688031215611f6057600080fd5b611f6986611cc4565b9450611f7760208701611cc4565b935060408601356001600160401b0380821115611f9357600080fd5b611f9f89838a01611ed7565b94506060880135915080821115611fb557600080fd5b611fc189838a01611ed7565b93506080880135915080821115611fd757600080fd5b50611fe488828901611dfb565b9150509295509295909350565b6000806040838503121561200457600080fd5b8235915061201460208401611cc4565b90509250929050565b6000806040838503121561203057600080fd5b82356001600160401b038082111561204757600080fd5b818501915085601f83011261205b57600080fd5b8135602061206882611eb4565b6040516120758282611dcf565b83815260059390931b850182019282810191508984111561209557600080fd5b948201945b838610156120ba576120ab86611cc4565b8252948201949082019061209a565b965050860135925050808211156120d057600080fd5b50611eaa85828601611ed7565b600081518084526020808501945080840160005b8381101561210d578151875295820195908201906001016120f1565b509495945050505050565b602081526000610d0e60208301846120dd565b60006020828403121561213d57600080fd5b81356001600160401b0381111561215357600080fd5b61215f84828501611dfb565b949350505050565b6000806040838503121561217a57600080fd5b61218383611cc4565b91506020830135801515811461219857600080fd5b809150509250929050565b60008083601f8401126121b557600080fd5b5081356001600160401b038111156121cc57600080fd5b6020830191508360208260051b85010111156121e757600080fd5b9250929050565b6000806000806040858703121561220457600080fd5b84356001600160401b038082111561221b57600080fd5b612227888389016121a3565b9096509450602087013591508082111561224057600080fd5b5061224d878288016121a3565b95989497509550505050565b6000806040838503121561226c57600080fd5b61227583611cc4565b915060208301356001600160401b0381111561229057600080fd5b611eaa85828601611ed7565b600080604083850312156122af57600080fd5b6122b883611cc4565b915061201460208401611cc4565b600080600080600060a086880312156122de57600080fd5b6122e786611cc4565b94506122f560208701611cc4565b9350604086013592506060860135915060808601356001600160401b0381111561231e57600080fd5b611fe488828901611dfb565b600181811c9082168061233e57607f821691505b60208210810361235e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612376818460208701611d3d565b9190910192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161240c5761240c6123e4565b5060010190565b6000808335601e1984360301811261242a57600080fd5b8301803591506001600160401b0382111561244457600080fd5b6020019150368190038213156121e757600080fd5b60008084546124678161232a565b6001828116801561247f5760018114612494576124c3565b60ff19841687528215158302870194506124c3565b8860005260208060002060005b858110156124ba5781548a8201529084019082016124a1565b50505082870194505b5050505083516124d7818360208801611d3d565b01949350505050565b601f82111561074957600081815260208120601f850160051c810160208610156125075750805b601f850160051c820191505b81811015610b1657828155600101612513565b81516001600160401b0381111561253f5761253f611db9565b6125538161254d845461232a565b846124e0565b602080601f83116001811461258857600084156125705750858301515b600019600386901b1c1916600185901b178555610b16565b600085815260208120601f198616915b828110156125b757888601518255948401946001909101908401612598565b50858210156125d55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105c7576105c76123e4565b6040815260006126e260408301856120dd565b82810360208401526126f481856120dd565b95945050505050565b60208082526021908201527f596f7520616c72656164792068617665207468697320636572746966696361746040820152606560f81b606082015260800190565b600060ff821660ff8103612754576127546123e4565b60010192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612795816017850160208801611d3d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516127c6816028840160208801611d3d565b01602801949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906127fe908301866120dd565b828103606084015261281081866120dd565b905082810360808401526128248185611d61565b98975050505050505050565b60006020828403121561284257600080fd5b8151610d0e81611d0a565b600060033d11156128665760046000803e5060005160e01c5b90565b600060443d10156128775790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156128a657505050505090565b82850191508151818111156128be5750505050505090565b843d87010160208285010111156128d85750505050505090565b6128e760208286010187611dcf565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906129b590830184611d61565b979650505050505050565b80820281158282048414176105c7576105c76123e4565b6000816129e6576129e66123e4565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a264697066735822122080e3373ed21727819c869961123187d735c0daf42d819562c1b20bd1dce0a3f964736f6c6343000813003397667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
  "deployedBytecode": "0x6080604052600436106101805760003560e01c806395d89b41116100d1578063c87b56dd1161008a578063e243bc9411610064578063e243bc9414610496578063e985e9c5146104a9578063f242432a146104f2578063f5b541a61461051257600080fd5b8063c87b56dd14610422578063d539139314610442578063d547741f1461047657600080fd5b806395d89b4114610378578063a14481941461038d578063a217fddf146103a0578063a22cb465146103b5578063ba772d8b146103d5578063bd85b039146103f557600080fd5b80632eb2c2d61161013e5780634e1273f4116101185780634e1273f4146102dc5780634f558e791461030957806355f804b31461033857806391d148541461035857600080fd5b80632eb2c2d61461027c5780632f2ff15d1461029c57806336568abe146102bc57600080fd5b8062fdd58e1461018557806301ffc9a7146101b857806306fdde03146101e85780630e89341c1461020a578063162094c41461022a578063248a9ca31461024c575b600080fd5b34801561019157600080fd5b506101a56101a0366004611ce0565b610534565b6040519081526020015b60405180910390f35b3480156101c457600080fd5b506101d86101d3366004611d20565b6105cd565b60405190151581526020016101af565b3480156101f457600080fd5b506101fd6105d8565b6040516101af9190611d8d565b34801561021657600080fd5b506101fd610225366004611da0565b610666565b34801561023657600080fd5b5061024a610245366004611e6e565b610671565b005b34801561025857600080fd5b506101a5610267366004611da0565b60009081526003602052604090206001015490565b34801561028857600080fd5b5061024a610297366004611f48565b6106d8565b3480156102a857600080fd5b5061024a6102b7366004611ff1565b610724565b3480156102c857600080fd5b5061024a6102d7366004611ff1565b61074e565b3480156102e857600080fd5b506102fc6102f736600461201d565b6107cc565b6040516101af9190612118565b34801561031557600080fd5b506101d8610324366004611da0565b600090815260046020526040902054151590565b34801561034457600080fd5b5061024a61035336600461212b565b6108f5565b34801561036457600080fd5b506101d8610373366004611ff1565b610958565b34801561038457600080fd5b506101fd610983565b61024a61039b366004611ce0565b610990565b3480156103ac57600080fd5b506101a5600081565b3480156103c157600080fd5b5061024a6103d0366004612167565b610a1c565b3480156103e157600080fd5b5061024a6103f03660046121ee565b610a27565b34801561040157600080fd5b506101a5610410366004611da0565b60009081526004602052604090205490565b34801561042e57600080fd5b506101fd61043d366004611da0565b610b1e565b34801561044e57600080fd5b506101a57f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561048257600080fd5b5061024a610491366004611ff1565b610b29565b61024a6104a4366004612259565b610b4e565b3480156104b557600080fd5b506101d86104c436600461229c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156104fe57600080fd5b5061024a61050d3660046122c6565b610bcb565b34801561051e57600080fd5b506101a56000805160206129ef83398151915281565b60006001600160a01b0383166105a45760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006105c782610c10565b600780546105e59061232a565b80601f01602080910402602001604051908101604052809291908181526020018280546106119061232a565b801561065e5780601f106106335761010080835404028352916020019161065e565b820191906000526020600020905b81548152906001019060200180831161064157829003601f168201915b505050505081565b60606105c782610c35565b6000805160206129ef83398151915261068981610d15565b6106938383610d22565b816040516106a19190612364565b6040519081900381209084907fda84ca2183491f179a603e877b2cb058e42195041c2b9c53d746427e519a34df90600090a3505050565b6001600160a01b0385163314806106f457506106f485336104c4565b6107105760405162461bcd60e51b815260040161059b90612380565b61071d8585858585610d7f565b5050505050565b60008281526003602052604090206001015461073f81610d15565b6107498383610f21565b505050565b6001600160a01b03811633146107be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161059b565b6107c88282610fa7565b5050565b606081518351146108315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161059b565b600083516001600160401b0381111561084c5761084c611db9565b604051908082528060200260200182016040528015610875578160200160208202803683370190505b50905060005b84518110156108ed576108c0858281518110610899576108996123ce565b60200260200101518583815181106108b3576108b36123ce565b6020026020010151610534565b8282815181106108d2576108d26123ce565b60209081029190910101526108e6816123fa565b905061087b565b509392505050565b6000805160206129ef83398151915261090d81610d15565b6109168261100e565b816040516109249190612364565b604051908190038120907ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f690600090a25050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600880546105e59061232a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66109ba81610d15565b6109d483836040518060200160405280600081525061101a565b826001600160a01b03167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe83604051610a0f91815260200190565b60405180910390a2505050565b6107c833838361104e565b6000805160206129ef833981519152610a3f81610d15565b838214610a7f5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b604482015260640161059b565b60005b84811015610b1657610b04868683818110610a9f57610a9f6123ce565b90506020020135858584818110610ab857610ab86123ce565b9050602002810190610aca9190612413565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061067192505050565b80610b0e816123fa565b915050610a82565b505050505050565b60606105c782610666565b600082815260036020526040902060010154610b4481610d15565b6107498383610fa7565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610b7881610d15565b610b9283836040518060200160405280600081525061112e565b826001600160a01b03167f0fccc44f8f4572066001d167eac735aa3f72308ef306fd3af1b0bb0b6a7ba90f83604051610a0f9190612118565b6001600160a01b038516331480610be75750610be785336104c4565b610c035760405162461bcd60e51b815260040161059b90612380565b61071d8585858585611201565b60006001600160e01b03198216637965db0b60e01b14806105c757506105c782611339565b600081815260066020526040812080546060929190610c539061232a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7f9061232a565b8015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b505050505090506000815111610cea57610ce583611389565b610d0e565b600581604051602001610cfe929190612459565b6040516020818303038152906040525b9392505050565b610d1f813361141d565b50565b6000828152600660205260409020610d3a8282612526565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b610d6684610666565b604051610d739190611d8d565b60405180910390a25050565b8151835114610da05760405162461bcd60e51b815260040161059b906125e5565b6001600160a01b038416610dc65760405162461bcd60e51b815260040161059b9061262d565b33610dd5818787878787611476565b60005b8451811015610ebb576000858281518110610df557610df56123ce565b602002602001015190506000858381518110610e1357610e136123ce565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e635760405162461bcd60e51b815260040161059b90612672565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610ea09084906126bc565b9250508190555050505080610eb4906123fa565b9050610dd8565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f0b9291906126cf565b60405180910390a4610b168187878787876114fa565b610f2b8282610958565b6107c85760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610fb18282610958565b156107c85760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60056107c88282612526565b6110248383610534565b156110415760405162461bcd60e51b815260040161059b906126fd565b610749838360018461165e565b816001600160a01b0316836001600160a01b0316036110c15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161059b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600082516001600160401b0381111561114957611149611db9565b604051908082528060200260200182016040528015611172578160200160208202803683370190505b50905060005b83518160ff1610156111ee5761119d85858360ff16815181106108b3576108b36123ce565b156111ba5760405162461bcd60e51b815260040161059b906126fd565b6001828260ff16815181106111d1576111d16123ce565b6020908102919091010152806111e68161273e565b915050611178565b506111fb8484838561173e565b50505050565b6001600160a01b0384166112275760405162461bcd60e51b815260040161059b9061262d565b33600061123385611898565b9050600061124085611898565b9050611250838989858589611476565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156112915760405162461bcd60e51b815260040161059b90612672565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906112ce9084906126bc565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461132e848a8a8a8a8a6118e3565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061136a57506001600160e01b031982166303a24d0760e21b145b806105c757506301ffc9a760e01b6001600160e01b03198316146105c7565b6060600280546113989061232a565b80601f01602080910402602001604051908101604052809291908181526020018280546113c49061232a565b80156114115780601f106113e657610100808354040283529160200191611411565b820191906000526020600020905b8154815290600101906020018083116113f457829003601f168201915b50505050509050919050565b6114278282610958565b6107c8576114348161199e565b61143f8360206119b0565b60405160200161145092919061275d565b60408051601f198184030181529082905262461bcd60e51b825261059b91600401611d8d565b60005b83518110156114eb576001600160a01b038616156114d95760405162461bcd60e51b815260206004820152601760248201527f5468697320746f6b656e206f6e6c7920666f7220796f75000000000000000000604482015260640161059b565b806114e3816123fa565b915050611479565b50610b16868686868686611b4b565b6001600160a01b0384163b15610b165760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061153e90899089908890889088906004016127d2565b6020604051808303816000875af1925050508015611579575060408051601f3d908101601f1916820190925261157691810190612830565b60015b6116255761158561284d565b806308c379a0036115be5750611599612869565b806115a457506115c0565b8060405162461bcd60e51b815260040161059b9190611d8d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161059b565b6001600160e01b0319811663bc197c8160e01b146116555760405162461bcd60e51b815260040161059b906128f2565b50505050505050565b6001600160a01b0384166116845760405162461bcd60e51b815260040161059b9061293a565b33600061169085611898565b9050600061169d85611898565b90506116ae83600089858589611476565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906116de9084906126bc565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611655836000898989896118e3565b6001600160a01b0384166117645760405162461bcd60e51b815260040161059b9061293a565b81518351146117855760405162461bcd60e51b815260040161059b906125e5565b3361179581600087878787611476565b60005b8451811015611830578381815181106117b3576117b36123ce565b60200260200101516000808784815181106117d0576117d06123ce565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461181891906126bc565b90915550819050611828816123fa565b915050611798565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118819291906126cf565b60405180910390a461071d816000878787876114fa565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118d2576118d26123ce565b602090810291909101015292915050565b6001600160a01b0384163b15610b165760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611927908990899088908890889060040161297b565b6020604051808303816000875af1925050508015611962575060408051601f3d908101601f1916820190925261195f91810190612830565b60015b61196e5761158561284d565b6001600160e01b0319811663f23a6e6160e01b146116555760405162461bcd60e51b815260040161059b906128f2565b60606105c76001600160a01b03831660145b606060006119bf8360026129c0565b6119ca9060026126bc565b6001600160401b038111156119e1576119e1611db9565b6040519080825280601f01601f191660200182016040528015611a0b576020820181803683370190505b509050600360fc1b81600081518110611a2657611a266123ce565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5557611a556123ce565b60200101906001600160f81b031916908160001a9053506000611a798460026129c0565b611a849060016126bc565b90505b6001811115611afc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab857611ab86123ce565b1a60f81b828281518110611ace57611ace6123ce565b60200101906001600160f81b031916908160001a90535060049490941c93611af5816129d7565b9050611a87565b508315610d0e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161059b565b6001600160a01b038516611bd25760005b8351811015611bd057828181518110611b7757611b776123ce565b602002602001015160046000868481518110611b9557611b956123ce565b602002602001015181526020019081526020016000206000828254611bba91906126bc565b90915550611bc99050816123fa565b9050611b5c565b505b6001600160a01b038416610b165760005b8351811015611655576000848281518110611c0057611c006123ce565b602002602001015190506000848381518110611c1e57611c1e6123ce565b6020026020010151905060006004600084815260200190815260200160002054905081811015611ca15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b606482015260840161059b565b60009283526004602052604090922091039055611cbd816123fa565b9050611be3565b80356001600160a01b0381168114611cdb57600080fd5b919050565b60008060408385031215611cf357600080fd5b611cfc83611cc4565b946020939093013593505050565b6001600160e01b031981168114610d1f57600080fd5b600060208284031215611d3257600080fd5b8135610d0e81611d0a565b60005b83811015611d58578181015183820152602001611d40565b50506000910152565b60008151808452611d79816020860160208601611d3d565b601f01601f19169290920160200192915050565b602081526000610d0e6020830184611d61565b600060208284031215611db257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611df457611df4611db9565b6040525050565b600082601f830112611e0c57600080fd5b81356001600160401b03811115611e2557611e25611db9565b604051611e3c601f8301601f191660200182611dcf565b818152846020838601011115611e5157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611e8157600080fd5b8235915060208301356001600160401b03811115611e9e57600080fd5b611eaa85828601611dfb565b9150509250929050565b60006001600160401b03821115611ecd57611ecd611db9565b5060051b60200190565b600082601f830112611ee857600080fd5b81356020611ef582611eb4565b604051611f028282611dcf565b83815260059390931b8501820192828101915086841115611f2257600080fd5b8286015b84811015611f3d5780358352918301918301611f26565b509695505050505050565b600080600080600060a08688031215611f6057600080fd5b611f6986611cc4565b9450611f7760208701611cc4565b935060408601356001600160401b0380821115611f9357600080fd5b611f9f89838a01611ed7565b94506060880135915080821115611fb557600080fd5b611fc189838a01611ed7565b93506080880135915080821115611fd757600080fd5b50611fe488828901611dfb565b9150509295509295909350565b6000806040838503121561200457600080fd5b8235915061201460208401611cc4565b90509250929050565b6000806040838503121561203057600080fd5b82356001600160401b038082111561204757600080fd5b818501915085601f83011261205b57600080fd5b8135602061206882611eb4565b6040516120758282611dcf565b83815260059390931b850182019282810191508984111561209557600080fd5b948201945b838610156120ba576120ab86611cc4565b8252948201949082019061209a565b965050860135925050808211156120d057600080fd5b50611eaa85828601611ed7565b600081518084526020808501945080840160005b8381101561210d578151875295820195908201906001016120f1565b509495945050505050565b602081526000610d0e60208301846120dd565b60006020828403121561213d57600080fd5b81356001600160401b0381111561215357600080fd5b61215f84828501611dfb565b949350505050565b6000806040838503121561217a57600080fd5b61218383611cc4565b91506020830135801515811461219857600080fd5b809150509250929050565b60008083601f8401126121b557600080fd5b5081356001600160401b038111156121cc57600080fd5b6020830191508360208260051b85010111156121e757600080fd5b9250929050565b6000806000806040858703121561220457600080fd5b84356001600160401b038082111561221b57600080fd5b612227888389016121a3565b9096509450602087013591508082111561224057600080fd5b5061224d878288016121a3565b95989497509550505050565b6000806040838503121561226c57600080fd5b61227583611cc4565b915060208301356001600160401b0381111561229057600080fd5b611eaa85828601611ed7565b600080604083850312156122af57600080fd5b6122b883611cc4565b915061201460208401611cc4565b600080600080600060a086880312156122de57600080fd5b6122e786611cc4565b94506122f560208701611cc4565b9350604086013592506060860135915060808601356001600160401b0381111561231e57600080fd5b611fe488828901611dfb565b600181811c9082168061233e57607f821691505b60208210810361235e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612376818460208701611d3d565b9190910192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161240c5761240c6123e4565b5060010190565b6000808335601e1984360301811261242a57600080fd5b8301803591506001600160401b0382111561244457600080fd5b6020019150368190038213156121e757600080fd5b60008084546124678161232a565b6001828116801561247f5760018114612494576124c3565b60ff19841687528215158302870194506124c3565b8860005260208060002060005b858110156124ba5781548a8201529084019082016124a1565b50505082870194505b5050505083516124d7818360208801611d3d565b01949350505050565b601f82111561074957600081815260208120601f850160051c810160208610156125075750805b601f850160051c820191505b81811015610b1657828155600101612513565b81516001600160401b0381111561253f5761253f611db9565b6125538161254d845461232a565b846124e0565b602080601f83116001811461258857600084156125705750858301515b600019600386901b1c1916600185901b178555610b16565b600085815260208120601f198616915b828110156125b757888601518255948401946001909101908401612598565b50858210156125d55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105c7576105c76123e4565b6040815260006126e260408301856120dd565b82810360208401526126f481856120dd565b95945050505050565b60208082526021908201527f596f7520616c72656164792068617665207468697320636572746966696361746040820152606560f81b606082015260800190565b600060ff821660ff8103612754576127546123e4565b60010192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612795816017850160208801611d3d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516127c6816028840160208801611d3d565b01602801949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906127fe908301866120dd565b828103606084015261281081866120dd565b905082810360808401526128248185611d61565b98975050505050505050565b60006020828403121561284257600080fd5b8151610d0e81611d0a565b600060033d11156128665760046000803e5060005160e01c5b90565b600060443d10156128775790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156128a657505050505090565b82850191508151818111156128be5750505050505090565b843d87010160208285010111156128d85750505050505090565b6128e760208286010187611dcf565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906129b590830184611d61565b979650505050505050565b80820281158282048414176105c7576105c76123e4565b6000816129e6576129e66123e4565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a264697066735822122080e3373ed21727819c869961123187d735c0daf42d819562c1b20bd1dce0a3f964736f6c63430008130033",
  "devdoc": {
    "details": "An ERC1155 token contract for minting and managing certificates with URI support.Rubyscore_Certificates can be minted by users with the MINTER_ROLE after proper authorization.Rubyscore_Certificates can have their URIs set by operators with the MINTER_ROLE.Rubyscore_Certificates can be safely transferred with restrictions on certain tokens.",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "BaseURISet(string)": {
        "details": "This event is triggered when the contract operator updates the base URI for retrieving metadata associated with tokens. The 'newBaseURI' parameter represents the updated base URI.",
        "params": {
          "newBaseURI": "The new base URI that will be used to construct token metadata URIs."
        }
      },
      "BatchMinted(address,uint256[])": {
        "details": "This event is emitted when new NFTs are created and assigned to a user.It includes the user's address and the IDs of the minted NFTs for transparency.",
        "params": {
          "nftIds": "NFT IDs that were minted.",
          "userAddress": "The address of the user receiving the NFTs."
        }
      },
      "Minted(address,uint256)": {
        "details": "This event is emitted when new NFTs are created and assigned to a user.It includes the user's address, and the ID of the minted NFT for transparency.",
        "params": {
          "nftId": "NFT IDs that were minted.",
          "userAddress": "The address of the user receiving the NFTs."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TokenURISet(uint256,string)": {
        "details": "This event is emitted when the URI for a token is modified, providing transparency when metadata URIs are changed for specific tokens.",
        "params": {
          "newTokenURI": "The new URI assigned to the token.",
          "tokenId": "The ID of the token for which the URI is updated."
        }
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "details": "Initializes the contract with roles and settings.It sets the base URI for token metadata to the provided `baseURI`.It grants the DEFAULT_ADMIN_ROLE, OPERATOR_ROLE, and MINTER_ROLE to the specified addresses.It also initializes the contract with EIP712 support and ERC1155 functionality.",
        "params": {
          "admin": "The address of the admin role, which has overall control.",
          "baseURI": "The base URI for token metadata.",
          "minter": "The address of the minter role, authorized to mint achievements and responsible for setting token URIs.",
          "operator": "The address of the operator role, responsible for unlock tokens and set base URI."
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchMint(address,uint256[])": {
        "details": "See {IRubyscore_Certificates}"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeMint(address,uint256)": {
        "details": "See {IRubyscore_Certificates}"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "See {IRubyscore_Certificates}"
      },
      "setBatchTokenURI(uint256[],string[])": {
        "details": "See {IRubyscore_Certificates}"
      },
      "setTokenURI(uint256,string)": {
        "details": "See {IRubyscore_Certificates}"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IRubyscore_Certificates}"
      },
      "tokenURI(uint256)": {
        "details": "See {IRubyscore_Certificates}"
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IRubyscore_Certificates}"
      }
    },
    "stateVariables": {
      "name": {
        "return": "Token name.",
        "returns": {
          "_0": "Token name."
        }
      },
      "symbol": {
        "return": "Token symbol.",
        "returns": {
          "_0": "Token symbol."
        }
      }
    },
    "title": "Rubyscore_Certificates",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BaseURISet(string)": {
        "notice": "Emitted when the base URI for token metadata is updated."
      },
      "BatchMinted(address,uint256[])": {
        "notice": "Emitted when NFTs are minted for a user."
      },
      "Minted(address,uint256)": {
        "notice": "Emitted when NFTs are minted for a user."
      },
      "TokenURISet(uint256,string)": {
        "notice": "Emitted when the URI for a specific token is updated."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for the Rubyscore_Achievement contract."
      },
      "name()": {
        "notice": "Get token name."
      },
      "symbol()": {
        "notice": "Get token symbol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 725,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 731,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 733,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2095,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2255,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_baseURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2259,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8299,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 8301,
        "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/certificates/Rubyscore_Certificates.sol:Rubyscore_Certificates",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}